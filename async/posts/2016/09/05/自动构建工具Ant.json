{"tags":[{"name":"项目管理","permalink":"http://www.smartyi8979.com/tags/项目管理/","url":"/async/tags/项目管理.json","count":1}],"categories":[{"name":"ssh开发从入门到出家","permalink":"http://www.smartyi8979.com/categories/ssh开发从入门到出家/","url":"/async/categories/ssh开发从入门到出家.json","count":2}],"url":"/async/posts/2016/09/05/自动构建工具Ant.json","date":1473119667000,"path":{"year":2016,"month":9,"day":5,"name":"自动构建工具Ant"},"title":"自动构建工具Ant","permalink":"http://www.smartyi8979.com/2016/09/05/自动构建工具Ant/","content":"<h3 id=\"1-什么是Ant\"><a href=\"#1-什么是Ant\" class=\"headerlink\" title=\"1. 什么是Ant\"></a>1. 什么是Ant</h3><p>在C和C++项目中，我们通常是利用Make工具来进行项目的编译和生成，相应的，对于Java项目来说，我们可以利用Ant工具来进行项目的编译，管理和生成。利用Ant工具来管理项目优点有：<br><a id=\"more\"></a></p>\n<ul>\n<li>Ant工具是基于Java语言的生成工具，而我们都知道Java语言由于具有JVM，因此具有良好的跨平台行，所以Ant工具也有很好的跨平台性；</li>\n<li>Ant工具的生成文件是XML文件，简单，易用</li>\n</ul>\n<p>在电脑上安装Ant非常简单，下载Ant工具安装包，将文件夹中的bin文件夹路径添加到系统路径当中，这样我们就可以使用ant工具了。</p>\n<h3 id=\"2-Ant的常用命令\"><a href=\"#2-Ant的常用命令\" class=\"headerlink\" title=\"2. Ant的常用命令\"></a>2. Ant的常用命令</h3><p>当我们把Ant安装到电脑中之后，我们就可以使用ant工具了。在终端输入ant -help就会显示出ant的各种命令使用方法和相关信息。这里简要介绍几条常用命令。</p>\n<ul>\n<li>ant: 不指定任何参数的命令ant会在当前目录下寻找默认生成文件，也就是build.xml文件，如果没找到显示build.xml file doesn’t exist.</li>\n<li>ant -find or ant -s: 这个命令会从当前路径下开始，一直往上层路径寻找生成文件，直到文件系统根目录，当然寻找的也是build.xml文件；</li>\n<li>ant -f fileName or ant -file filaName: 这个命令是不用默认的生成文件来编译项目，而是指定其他的生成文件；</li>\n<li>ant -D<property>=<value>: 这个命令则是覆盖生成文件property的value；同样的也可以往生成文件中传入某个属性的值，从而在生成文件中可以使用该属性的值； </value></property></li>\n</ul>\n<h3 id=\"3-Ant的生成文件\"><a href=\"#3-Ant的生成文件\" class=\"headerlink\" title=\"3. Ant的生成文件\"></a>3. Ant的生成文件</h3><p>Ant工具的目的是什么，管理编译生成项目，那么理所当然项目的生成文件就是Ant工具的核心，重中之重。</p>\n<p>在Ant工具中，默认的生成文件名是build.xml文件，当然我们也可以定义自己的文件名，如果这样做，在编译项目时，就必须指定生成文件。</p>\n<p>生成文件可以放在项目的任何位置，只要在配置生成文件的时候，将路径配置好就行。但一般做法就是放在项目的顶层路径，这样有利于保持项目的简洁清晰，同时在配置路径时简单，容易理解。</p>\n<p>对于Java项目，它的结构一般如下：</p>\n<p>Project：这是Java项目，包含了当前项目所有的资源  </p>\n<ul>\n<li>src:存放源资源，各种配置文件</li>\n<li>classes:存放编译后的class文件</li>\n<li>lib:存放第三方JAR包文件夹</li>\n<li>dist:存放项目打包，项目发布文件</li>\n<li>buid.xml：Ant生成文件</li>\n</ul>\n<p>上述结构是一般的Java项目结构，具体的项目可能会有差别。</p>\n<h4 id=\"3-1-build-xml文件的构成\"><a href=\"#3-1-build-xml文件的构成\" class=\"headerlink\" title=\"3.1: build.xml文件的构成\"></a>3.1: build.xml文件的构成</h4><p>一个项目的生成文件的根元素是<code>&lt;project.../&gt;</code>，除此之外就是项目的target元素，target元素是<code>&lt;project&gt;</code>元素的的子元素，也是生成文件的核心所在。</p>\n<ul>\n<li><p><code>&lt;project&gt;</code>元素：主要包含对整个项目的一些说明，以及整个生成文件的路径的basedir。四个常用的属性：default, basedir, name, description. </p>\n<ul>\n<li>default: 指定默认执行的target</li>\n<li>basedir: 指定生成文件中所有路径的基准路径</li>\n<li>name: 项目的名字</li>\n<li>description: 项目的介绍</li>\n</ul>\n</li>\n<li><p><code>&lt;target&gt;</code>元素：target元素是project元素的子元素，用来制定生成目标，每个生成目标(target)由一个或者多个任务(task)组成，因此当执行某个target时，就是以此完成target中的那些任务(task)。常用属性有：name，depends，if，unless, description.</p>\n<ul>\n<li>name: target的名字，非常重要，同一个生成文件不能出现重名的target，当用ant指定运行时就是通过这个属性指定特定的生成目标；</li>\n<li>depends: 可以指定一个或者多个target，表示执行当前target要执行属性指定的target；</li>\n<li>if: 表示只有当当前属性被设置，才执行此target；</li>\n<li>unless: 与if相反，表示当没有设置当前属性时，才执行此target；</li>\n<li>description: 当前target的描述</li>\n</ul>\n</li>\n</ul>\n<p>因而在ant生成文件的基本结构是project元素里面含有多个target元素，而一个target元素包含多个task。</p>\n<ul>\n<li><p><code>&lt;property&gt;</code>元素：property元素用于定义属性，类似于编程语言中的宏变量。<br>  最简单的形式如下：<br>  <code>&lt;property name=&quot;propertyName&quot; value=&quot;value&quot;/&gt;</code><br>  除此之外，还有从file和url读取property的名字和值。<br>  <code>&lt;property file=&quot;filePath&quot;/&gt;</code><br>  <code>&lt;property url=&quot;http://www.sss.xxx&quot;/&gt;</code><br>  在生成文件中获取该property值的方法是${propertyName}。</p>\n</li>\n<li><p><code>&lt;path&gt;、&lt;classpath&gt;</code>元素</p>\n</li>\n</ul>\n<p>这两个元素的作用在于编写生成文件的时候，可能需要用到第三方的JAR包或者是项目下的某些文件，那么我们就可以用这两个元素来进行指定。这两个元素的区别在于，<code>&lt;path&gt;</code>是project元素的子元素，它定义的是一个独立的，有名字供其他元素引用的一个文件集，而<code>&lt;classpath&gt;</code>常常用于某个任务(task)中来指定当前任务的文件集，可以引用别的文件集，也可以自己定义一个文件集。</p>\n<p><code>&lt;path&gt;、&lt;classpath&gt;</code>两个元素接受的子元素有：</p>\n<ul>\n<li><code>&lt;dirset.../&gt;</code>：采用模式字符串指定一系列的目录</li>\n<li><code>&lt;fileset.../&gt;</code>：采用模式自负窜指定一系列的文件</li>\n<li><code>&lt;filelist.../&gt;</code>：使用具体的文件名</li>\n<li><code>&lt;pathelement.../&gt;</code>：用于指定一个或者多个目录</li>\n</ul>\n<p>以上四个子元素都可以指定一些文件或者文件集，供生成文件内部使用。</p>\n<h3 id=\"4-Ant的Task\"><a href=\"#4-Ant的Task\" class=\"headerlink\" title=\"4. Ant的Task\"></a>4. Ant的Task</h3><p>Task是生成文件的真正核心，每个target生成目标都由一个或者多个task组成。<br>Ant的task分为核心task，可选task和用户自定义task。简要介绍一下task中核心任务用的较多的几个：</p>\n<ul>\n<li>javac:这个任务我们很熟悉了，这就是编译java 文件的指令。在这里也是一样，不过可以同时编译多个java文件，必备属性是srcdir和destdir，分别制定源文件的位置和编译后class文件存放的位置。</li>\n<li>java:这个指令我们也很熟悉了，用于运行某个编译后的java类。必备属性classname，用于指定执行的是哪个java类。</li>\n<li>jar：用于生成jar包，必备属性是destfile，用于指定生成jar包的文件名。除此之外，还通常加上一个文件集，用于指定将哪些文件打包到jar文件中。</li>\n<li>echo：用于输出某个字符串</li>\n<li>copy：用于复制文件或者文件夹，也通常与文件集一起使用</li>\n<li>delete：删除文件或者文件夹，也通常与文件集一起使用</li>\n<li>mkdir：用于创建文件夹</li>\n<li>move：用于移动文件或者路径</li>\n</ul>\n<p>具体的使用方法，可以参见ant的manual。</p>\n<p>下面给出一个简单的build.xml文件，该文件定义了编译项目，运行项目，生成jar包等常用的指令，从这个例子中我们可以得到一些开发生成文件的经验。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> build.xml文件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot;?&gt;&lt;!--指定编码格式--&gt;</span><br><span class=\"line\">&lt;!--定义项目名称为firstXML，基准路径为文件当前路径，默认target为空和描述--&gt;</span><br><span class=\"line\">&lt;project name=&quot;firstXML&quot; basedir=&quot;.&quot; default=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;!--定义三个简单的属性，供后续生成文件内容使用--&gt;</span><br><span class=\"line\">&lt;property name=&quot;src&quot; value=&quot;src&quot; /&gt;</span><br><span class=\"line\">&lt;property name=&quot;classes&quot; value=&quot;classes&quot; /&gt;</span><br><span class=\"line\">&lt;property name=&quot;dest&quot; value=&quot;dest&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--定义一组文件和路径集，供后续生成文件内容使用--&gt;</span><br><span class=\"line\">&lt;!--注意，这里定义的是path元素，里面的id属性可以用来作为reference id使用--&gt;</span><br><span class=\"line\">&lt;path id=&quot;classpath&quot;&gt;</span><br><span class=\"line\">\t&lt;pathelement path=&quot;$&#123;classes&#125;&quot;&gt;</span><br><span class=\"line\">&lt;/path&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--开始定义target，即生成目标--&gt;</span><br><span class=\"line\">&lt;!--第一个target，help指令。用于显示当前项目支持的target--&gt;</span><br><span class=\"line\">&lt;target name=&quot;help&quot; description=&quot;打印帮助信息&quot;&gt;</span><br><span class=\"line\">\t&lt;echo&gt;help - 打印帮助信息&lt;/echo&gt;</span><br><span class=\"line\">\t&lt;echo&gt;compile - 编译java源文件&lt;/echo&gt;</span><br><span class=\"line\">\t&lt;echo&gt;run - 运行程序&lt;/echo&gt;</span><br><span class=\"line\">\t&lt;echo&gt;build - 打包jar包&lt;/echo&gt;</span><br><span class=\"line\">\t&lt;echo&gt;clean - 清除所有编译生成的文件&lt;/echo&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--定义compile target，用于编译java源文件--&gt; </span><br><span class=\"line\">&lt;target name=&quot;compile&quot;&gt;</span><br><span class=\"line\">\t&lt;!--先删除classes文件夹--&gt;</span><br><span class=\"line\">\t&lt;delete dir=&quot;$&#123;classes&#125;&quot; /&gt;</span><br><span class=\"line\">\t&lt;!--然后再生成classes文件夹--&gt;</span><br><span class=\"line\">\t&lt;mkdir dir=&quot;$&#123;classes&#125;&quot; /&gt;</span><br><span class=\"line\">\t&lt;!--编译java文件，编译后的class文件放到classes属性所代表的文件夹内--&gt;</span><br><span class=\"line\">\t&lt;javac destdir=&quot;$&#123;classes&#125;&quot; debug=&quot;true&quot; includeantruntime=&quot;yes&quot;</span><br><span class=\"line\">\tdeprecation=&quot;false&quot; optimize=&quot;false&quot; failonerror=&quot;true&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!--指定编译文件的源位置--&gt;</span><br><span class=\"line\">\t\t&lt;src path=&quot;$&#123;src&#125;&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;!--指定编译过程中可能需要的第三方文件的路径,这里用到了refid去引用上面定义的文件路径集--&gt;</span><br><span class=\"line\">\t\t&lt;classpath refid=&quot;classpath&quot;/&gt;</span><br><span class=\"line\">\t&lt;/javac&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--定义run target，用于运行java编译文件。运行此target之前，必须先经过compile target--&gt;</span><br><span class=\"line\">&lt;target name=&quot;run&quot; description=&quot;运行程序&quot; depends=&quot;compile&quot;&gt;</span><br><span class=\"line\">\t&lt;!--运行一个java小程序，利用fork属性来开启一个新的jvm来执行java命令。这样使得ant工具执行完毕退出后，运行的java程序不会退出。--&gt;</span><br><span class=\"line\">\t&lt;java classname=&quot;packageName.ClassName&quot; fork=&quot;yes&quot; failonerror=&quot;true&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!--运行程序需要的第三方文件的路径--&gt;</span><br><span class=\"line\">\t\t&lt;classpath refid=&quot;classpath&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;!--运行程序时需要提供的参数--&gt;</span><br><span class=\"line\">\t\t&lt;arg line=&quot;arg1 arg2&quot;/&gt;</span><br><span class=\"line\">\t&lt;/java&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--定义build target，用于打包jar包。运行此target之前，必须先经过compile target--&gt;</span><br><span class=\"line\">&lt;target name=&quot;build&quot; description=&quot;打包jar包&quot; depends=&quot;compile&quot;&gt;</span><br><span class=\"line\">\t&lt;!--先删除存放jar包的文件夹--&gt;</span><br><span class=\"line\">\t&lt;delete dir=&quot;$&#123;dest&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;!--再创建jar包文件夹--&gt;</span><br><span class=\"line\">\t&lt;mkdir dir=&quot;$&#123;dest&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;!--将classes文件夹下的所有文件都打包到jar包当中去--&gt;</span><br><span class=\"line\">\t&lt;jar destfile=&quot;$&#123;dest&#125;/app.jar&quot; basedir=&quot;$&#123;classes&#125;&quot; includes=&quot;**/*.class&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!--为jar包添加属性--&gt;</span><br><span class=\"line\">\t\t&lt;manifest&gt;</span><br><span class=\"line\">\t\t\t&lt;attribute name=&quot;Name&quot; value=&quot;Value&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/manifest&gt;</span><br><span class=\"line\">\t&lt;/jar&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--定义clean target，用于清除所有编译生成的文件--&gt;</span><br><span class=\"line\">&lt;target name=&quot;clean&quot; description=&quot;清除所有编译文件生成的文件&quot;&gt;</span><br><span class=\"line\">\t&lt;delete dir=&quot;$&#123;classes&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;delete dir=&quot;$&#123;dest&#125;&quot;&gt;</span><br><span class=\"line\">&lt;/target&gt;</span><br></pre></td></tr></table></figure>\n<p>以上定义了一个很简单的build.xml生成文件，用这个生成文件我们就可以管理java项目了。当然随着java项目结构的越发复杂，生成文件也会变得更加复杂，项目之间的依赖也会变得复杂。但万变不离其宗，掌握好基本的用法，学会查看manual，build.xml文件也就不难写了。</p>\n"}