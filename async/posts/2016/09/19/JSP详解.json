{"tags":[{"name":"JSP","permalink":"http://www.smartyi8979.com/tags/JSP/","url":"/async/tags/JSP.json","count":1},{"name":"Servlet","permalink":"http://www.smartyi8979.com/tags/Servlet/","url":"/async/tags/Servlet.json","count":1}],"categories":[{"name":"ssh开发从入门到出家","permalink":"http://www.smartyi8979.com/categories/ssh开发从入门到出家/","url":"/async/categories/ssh开发从入门到出家.json","count":2}],"url":"/async/posts/2016/09/19/JSP详解.json","date":1474265625000,"path":{"year":2016,"month":9,"day":19,"name":"JSP详解"},"title":"JSP详解","permalink":"http://www.smartyi8979.com/2016/09/19/JSP详解/","content":"<h3 id=\"1-什么是JSP\"><a href=\"#1-什么是JSP\" class=\"headerlink\" title=\"1. 什么是JSP\"></a>1. 什么是JSP</h3><a id=\"more\"></a>\n<p>JSP(Java Server Page)是一种在HTML页面中掺杂java语句从而能够动态生成HTML页面的一种技术。JSP的出现改善了在servlet中利用java对象输出大量难读，难写的html标签的情况，从而使得servlet专注于控制器层，而JSP等其他相关技术专注于表现层，进一步确立了web  开发过程中MVC模式。  </p>\n<p>JSP的本质依然是一个servlet，当我们编写一个jsp文件之后，客户发起一个请求，这个请求通过servlet转到某个jsp文件，这时候web容器会对当前的jsp文件进行编译，当编译成servlet文件之后，才会执行。因此往往每个jsp文件的第一个访问者，会发现速度很慢，因为jsp文件还未被容器编译成servlet文件。  </p>\n<p>如果开发者是在本地进行的开发，容器用的是Tomcat，可以在Tomcat的work文件夹相对应的web名称下找到容器编译后生成的servlet文件。这也说明了jsp其实是servlet的草稿，它简化了servlet的功能，使得servlet专注控制器部分，而真正运行的是servlet。</p>\n<h3 id=\"2-JSP的使用\"><a href=\"#2-JSP的使用\" class=\"headerlink\" title=\"2. JSP的使用\"></a>2. JSP的使用</h3><p>前面我们说过，jsp是往静态的html语言中插入动态的java语句，从而实现页面的动态输出。那么如何在html语句中实现java语句呢？</p>\n<h4 id=\"2-1-JSP的四种基本语法\"><a href=\"#2-1-JSP的四种基本语法\" class=\"headerlink\" title=\"2.1 JSP的四种基本语法\"></a>2.1 JSP的四种基本语法</h4><p>jsp常用的四种语法分别是：注释，声明，表达式和脚本。</p>\n<ol>\n<li>注释<br>jsp注释语法的格式是：<strong>&lt;%– 这里是注释 –%&gt;</strong><br>jsp的注释内容仅仅提供开发过程的提示作用，最后面输出到客户端的html代码中是无法看见jsp注释的。这有别于html代码的注释，html的注释是可以在客户端的源码。</li>\n<li>声明<br>jsp声明的语法格式是:<strong>&lt;%! 这里是声明内容 %&gt;</strong><br>之前提到，jsp会在运行的时候由容器编译成servlet文件，而servlet是一个java 对象，因此在jsp中进java变量或者方法的声明和在servlet中的声明是一样的。容器会在编译的时候将jsp中声明的变量和方法编译到对应的servlet中去，且接受private，public，static等修饰符，但不接受abstract修饰，一旦被abstract修饰，编译生成的servlet将会成为抽象类，无法被实例化。值得注意的是，容易编译servlet时，每个servlet在容器中只存在一个实例。</li>\n<li>表达式<br>jsp输出表达式的语法格式：<strong>&lt;%=表达式(注意jsp表达式后面无需添加分号表示结束)%&gt;</strong><br>jsp中的表达式语句在对应的servlet中将会编译为out.print()语句。因此起到的作用就是简化jsp的输出语法。</li>\n<li>脚本<br>jsp脚本的语法格式是：<strong>&lt;% 这里是java程序 %&gt;</strong><br>嵌套在<strong>&lt;% %&gt;</strong>中的java代码就是jsp中的java脚本，<strong><em>jsp中的java脚本将会被容器编译成Service()方法中的可执行代码，因此对于jsp脚本来说，不能在其中定义方法，因为在java中我们不允许在方法中定义方法。</em></strong></li>\n</ol>\n<p>以上四种就是jsp的四种基本语法，理解这四种基本语法在于理解他们分别在jsp编译成的servlet中起到什么作用，与我们以往学习的知识进行连接，才不会出错。</p>\n<h4 id=\"2-2-JSP的三大基本编译指令\"><a href=\"#2-2-JSP的三大基本编译指令\" class=\"headerlink\" title=\"2.2 JSP的三大基本编译指令\"></a>2.2 JSP的三大基本编译指令</h4><p>jsp的编译指令不直接生成输出，这些编译指令会通知jsp引擎或者servlet引擎对当前的jsp文件在进行编译的过程中起作用。常用的编译指令有：page， include和taglib。  </p>\n<ol>\n<li>page： 指定的编译指令是针对当前页面</li>\n<li>include： 用于指定当前页面包含另一个页面，通常是静态包含</li>\n<li>taglib： 用于定义和访问自定义的标签</li>\n</ol>\n<p>在jsp中插入编译指令的语法是： <strong>&lt;%@ 编译指令名 属性名1=“属性值1” 属性名2=“属性值2” …%&gt;</strong>注意，各属性定义之间不要用符号分隔开。</p>\n<h5 id=\"2-2-1-page编译指令\"><a href=\"#2-2-1-page编译指令\" class=\"headerlink\" title=\"2.2.1 page编译指令\"></a>2.2.1 page编译指令</h5><p>page常用的属性有：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>language</td>\n<td>声明当前页面脚本的语言，默认为java</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>指定jsp编译成servlet之后所需要继承的类，或者所实现的接口</td>\n</tr>\n<tr>\n<td>import</td>\n<td>常用的，用于导入当前脚本中可能使用到的其他包里面的类</td>\n</tr>\n<tr>\n<td>info</td>\n<td>包含jsp的信息，一般作为当前jsp文件的说明用。可以通过getServletInfo()来获取</td>\n</tr>\n<tr>\n<td>errorPage</td>\n<td>常用。指定当前jsp文件发生错误时，自动调用改属性值指定的jsp文件。如果不指定当前属性值，当发生错误时，会抛出异常信息给客户。</td>\n</tr>\n<tr>\n<td>contentType</td>\n<td>指定生成网页的文件格式和编码字符集</td>\n</tr>\n<tr>\n<td>isErrorPage</td>\n<td>用于指定当前jsp文件是否为错误处理jsp文件</td>\n</tr>\n</tbody>\n</table>\n<p>一个常见的jsp编译指令的使用可能是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--指定脚本语言是java，指定生成网页的文件格式和编码字符集--%&gt;</span><br><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GBK&quot; %&gt;</span><br><span class=\"line\">&lt;%--指定导入的包的位置--%&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.package.*&quot; %&gt;</span><br><span class=\"line\">&lt;%--指定当前jsp文件发生错误时，处理错误的jsp文件--%&gt;</span><br><span class=\"line\">&lt;%@ page errorPage=&quot;error.jsp&quot; %&gt;</span><br><span class=\"line\">&lt;%--说明当前jsp文件不是用来处理错的jsp文件--%&gt;</span><br><span class=\"line\">&lt;%@ page isErrorPage=&quot;false&quot;%&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-2-include编译指令\"><a href=\"#2-2-2-include编译指令\" class=\"headerlink\" title=\"2.2.2 include编译指令\"></a>2.2.2 include编译指令</h5><p>include编译指令，可以将一个外部文件静态导入到当前的jsp文件当中，使得当前jsp文件在生成servlet后会嵌入外部文件所生成的代码。include指令可以包含一个静态的文本，也可以导入动态的jsp文件。注意，这里说的静态导入和动态jsp文件不是指的一回事，导入动态jsp文件并不意味着动态导入，而依然是静态导入。指令格式如下：<br><strong>&lt;%@ include file=”xxx.txt”%&gt;</strong>或者<strong>&lt;%@ include file=”xxx.jsp”%&gt;</strong><br>jsp的include静态导入对象如果是一个jsp文件的话，静态导入的结果还会把目标jsp文件的编译指令导入进来，因此如果两个jsp文件的编译指令发生冲突，那么在容器生成servlet的过程中就会发生错误。</p>\n<h5 id=\"2-2-3-taglib编译指令\"><a href=\"#2-2-3-taglib编译指令\" class=\"headerlink\" title=\"2.2.3 taglib编译指令\"></a>2.2.3 taglib编译指令</h5><p>taglib的编译指令作用由名字也可以知道，就是导入一个标签库，指定标签库的uri以及在当前jsp中使用该标签库中标签的prefix（前缀），就可以完成标签库的导入了。语法如下：<br>&lt;%@ taglib uri=”xxx/yyy/zzz” prefix=”myTag” %&gt;<br>使用导入标签库的方式：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;myTag:tagName/&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-JSP的三大动作指令\"><a href=\"#2-3-JSP的三大动作指令\" class=\"headerlink\" title=\"2.3 JSP的三大动作指令\"></a>2.3 JSP的三大动作指令</h4><p>jsp的动作指令有区别于编译指令，编译指令是jsp在通知容器进行编译的过程中起作用的，而动作指令则是在编译之后运行过程中起作用的。常见的jsp的动作指令有：</p>\n<ol>\n<li><p>jsp:forward<br> forward动作指令是将当前页面的响应转到一个新的页面，这个新的页面会继续相应。<strong>注意：forward指令并不会生成一次新的请求request，这也就是说请求参数不会丢失，在新的页面中还是能够通过request.getParameter()方法获取参数值。</strong>除此之外，在转向新的页面之前，还可以通过jsp:param指令向request中添加额外参数。其完整使用语法如下：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:forward page=\"URL|&lt;%=expression%&gt;\"&gt;  </span><br><span class=\"line\">\t&lt;jsp:param name=\"\" value=\"\" /&gt;  </span><br><span class=\"line\">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>\n<p> 转到的目标page不仅可以是相对路径下的合法url，还可以是jsp的表达式输出。</p>\n</li>\n<li><p>jsp:include<br>  include动作指令和编译指令中的include指令作用相似，都是用于导入某个jsp文件。但include动作指令是一个动态导入指令，不同于静态include导入指令，区别在于：</p>\n<ol>\n<li>动态导入指令只会导入被导入文件的主体body部分，其余部分不会导入，也就是说编译指令不会被导入，而静态在导入也会一并把编译指令导入；</li>\n<li>动态导入指令并不是真正将被导入文件内容插入到自身，而是调用编译后的servlet中的include方法将被导入文件的主体body部分导入进来，而静态指令是两者合二为一生成一个servlet；</li>\n<li><p>动态导入还可以利用jsp的param动作指令为被导入文件添加而外的参数；</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsp的include指令的语法如下：</span><br><span class=\"line\">&lt;jsp:include page=\"&#123;url|&lt;%=expression%&gt;&#125;\"&gt;</span><br><span class=\"line\">\t&lt;jsp:param name=\"\" value=\"\" /&gt;</span><br><span class=\"line\">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>jsp:param<br> jsp的param指令在之前的两个动作指令中已经有涉及，不会单独使用，一般都是搭配以上两个指令一起使用。用于添加额外的参数。当和forward指令搭配时，往转入目标页面添加参数；当与include搭配时。往被导入页面添加参数。</p>\n</li>\n</ol>\n<h4 id=\"2-4-JSP的九大内置对象\"><a href=\"#2-4-JSP的九大内置对象\" class=\"headerlink\" title=\"2.4 JSP的九大内置对象\"></a>2.4 JSP的九大内置对象</h4><p>jsp总共包含9个内置对象。内置对象意味着在jsp中你可以不要通过声明，就可以直接在jsp的脚本中进行使用。<strong>记得jsp是servlet的草稿文件，因此jsp往往会编译成servlet之后才会运行，而这9个内置对象要么就是编译后生成servlet的形参，要么就是servlet中service()方法的局部变量，因此在jsp的脚本中可以直接使用。</strong>这9个内置对象是：</p>\n<table>\n<thead>\n<tr>\n<th>对象名</th>\n<th>对象作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>application</td>\n<td>代表当前整个web本身，存放在application中的数据可以供所有的servlet和jsp共享，无论哪次请求，无论哪次会话都有效。</td>\n</tr>\n<tr>\n<td>config</td>\n<td>config代表jsp配置信息的实例。一般来说，jsp中的该对象用的比较少，在servlet中用到config比较多，但是因为servlet中没有内置对象，因此要通过getServletConfig()方法来获取当前servlet的config实例对象。</td>\n</tr>\n<tr>\n<td>exception</td>\n<td>当当前的jsp页面是错误处理页面时，也就是isError属性设为true时，exception对象才会被实例化。常用于输出错误信息和错误栈</td>\n</tr>\n<tr>\n<td>out</td>\n<td>对应了servlet中的输出流对象，常常用于输出变量值和常亮。在之前我们提到过jsp的表达式输出，表达式输出的实质就是out对象的输出过程，因此在jsp中能够使用表达式输出的地方都能用到out对象来输出，但表达式输出更加的简洁。</td>\n</tr>\n<tr>\n<td>page</td>\n<td>代表页面本身</td>\n</tr>\n<tr>\n<td>pageContext</td>\n<td>代表页面上下文。注意页面上下文和页面本身不同。页面上下文可以用于页面之间的数据共享。通过这个对象可以获取page，request，session，application对象；还可以为参数设置的scope，从而使得参数可以在不同的scope之间共享。但一般page，request，session，application四个对象在jsp中已经内置，因此往往是在servlet中才会使用pageContext来获取我们想要的对象。</td>\n</tr>\n<tr>\n<td>request</td>\n<td>代表当前请求。客户端的所有请求信息都被封装在这个对象当中，这也是我们最经常使用的一个对象。</td>\n</tr>\n<tr>\n<td>response</td>\n<td>代表服务器对客户端请求的响应，一般响应分为输出流和重定向。在servlet中输出流通过response获取上面的out对象进行输出，重定向表示生成新的request向一个新的页面发出请求</td>\n</tr>\n<tr>\n<td>session</td>\n<td>代表一次会话。当客户端浏览器与站点连接，会话建立；客户端关闭浏览器，会话结束。</td>\n</tr>\n</tbody>\n</table>\n<p>除此之外，在web开发过程中，还有一个重要的概念是cookie。因为当客户端断开与服务器的连接时，会话就会结束，当前会话的所有信息就被丢失。如果我们想保存某些信息，可以利用cookie将相关信息保存到我们的机器上，直到cookie失效。往客户端机器添加cookie也是response内置对象的责任。可以通过response.addCookie()的方法来添加cookie。cookie的使用很简单，利用即将存储的信息实例化一个cookie对象，<strong>一定记得设置cookie的失效时间，否则cookie会默认会话结束，cookie实效</strong>，最后由response对象添加即可。那么如何获得当前客户端机器的cookie呢，这就是request对象的任务了，通过getCookies()对象就可以获取当前客户端机器的所有cookie了。</p>\n<h3 id=\"3-开发自己的JSP标签库\"><a href=\"#3-开发自己的JSP标签库\" class=\"headerlink\" title=\"3. 开发自己的JSP标签库\"></a>3. 开发自己的JSP标签库</h3><p>在上面我们提到过jsp中可以插入java脚本来完成一些逻辑功能，但事实上jsp只是表现层技术，我们尽可能的不要再jsp中完成逻辑的实现。但有时候从servlet返回的结果比较复杂，需要我们在jsp中进行一些处理才能输出，这种情况下完成一些逻辑的视线不可避免。但我们仍然可以避免，jsp的自定义标签技术，可以用一种近似于html的标签格式来隐式的完成一些逻辑操作。自定义的jsp标签库分为三部分：</p>\n<ol>\n<li>建立标签处理类(一个标签对应于一个标签处理类)；</li>\n<li>为标签库处理类建立tld文件；</li>\n<li>在jsp中导入标签库并使用；</li>\n</ol>\n<h4 id=\"3-1-建立标签处理类\"><a href=\"#3-1-建立标签处理类\" class=\"headerlink\" title=\"3.1 建立标签处理类\"></a>3.1 建立标签处理类</h4><p>创立标签处理类的步骤实在简单，定义一个普通的java class文件，使其继承(extends)SimpleTagSupport超类就定义了一个标签处理类，重写doTag()方法，在其中实现你想要的逻辑。<strong>值得注意的是，如果你定义的标签需要任何的属性，必须在处理类中为每一个属性添加getter和setter方法，当然你可以通过通过lombok来隐式生成。</strong></p>\n<h4 id=\"3-2-创建tld文件\"><a href=\"#3-2-创建tld文件\" class=\"headerlink\" title=\"3.2 创建tld文件\"></a>3.2 创建tld文件</h4><p>在WEB-INF文件夹下，建立一个以tld为后缀的文件。但其实tld文件是一个标准的xml文件。<strong>根元素是<taglib>，其代表的是一个标签库，一个标签库包含众多标签,它的子元素是<tag>，每一个<tag>代表一个当前标签库下的一个标签，也对应于一个标签处理类。当然对于每一个标签，还有一些它自己的子元素。</tag></tag></taglib></strong>来看一个一般的tld文件的格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"GBK\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">taglib</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\t<span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tlib-version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">tlib-version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">short-name</span>&gt;</span>mytaglib<span class=\"tag\">&lt;/<span class=\"name\">short-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">uri</span>&gt;</span>xxx/yyy/zzz<span class=\"tag\">&lt;/<span class=\"name\">uri</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>tagName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tag-class</span>&gt;</span>package.TagClass<span class=\"tag\">&lt;/<span class=\"name\">tag-class</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">body-content</span>&gt;</span>empty|scriptless|tagdependent<span class=\"tag\">&lt;/<span class=\"name\">bodycontent</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dynamic-attributes</span>&gt;</span>true|false<span class=\"tag\">&lt;/<span class=\"name\">dynamic-attributes</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在上述定义中，重要的是<strong>uri</strong>元素和<strong>tag</strong>元素。uri统一资源定位符，在jsp中使用自定义开发的标签库时就是通过这个参数来进行唯一定位，<strong>因此绝对重要且必须唯一</strong>；tag元素就是定义标签库中的一个标签。</p>\n<h5 id=\"3-2-1-开发带属性的标签\"><a href=\"#3-2-1-开发带属性的标签\" class=\"headerlink\" title=\"3.2.1 开发带属性的标签\"></a>3.2.1 开发带属性的标签</h5><p>什么是标签的属性，当我们使用标签的时候，随着标签一起输入的那些参数就叫做标签的属性。例如：<br><figure class=\"highlight plain\"><figcaption><span>type=\"submit\" value=\"Submit\"</span><a href=\"/>```其中的**type**和**value**就是属性。那么如何为自定义的标签定义属性呢？由于自定义的标签是由标签处理类来进行处理的，那么当然在标签处理类中必须要有这些属性且实现这些属性的setter和getter方法。\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">class Person extends SimpleTagSupport &#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\">\t@setter</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t@getter</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t@override</span><br><span class=\"line\">\tpublic void doTag() throws JspException, IOException &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在tld文件中定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tag&gt;</span><br><span class=\"line\">\t&lt;name&gt;person&lt;/name&gt;</span><br><span class=\"line\">\t&lt;tag-class&gt;xxx.Person&lt;/tag-class&gt;</span><br><span class=\"line\">\t&lt;tag-content&gt;empty&lt;/tag-content&gt;</span><br><span class=\"line\">\t&lt;attribute&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;name&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;required&gt;true&lt;/required&gt;</span><br><span class=\"line\">\t\t&lt;fragment&gt;true&lt;/fragment&gt;</span><br><span class=\"line\">\t&lt;/attribute&gt;</span><br><span class=\"line\">\t&lt;attribute&gt;</span><br><span class=\"line\">\t\t&lt;name&gt;gender&lt;/name&gt;</span><br><span class=\"line\">\t\t&lt;required&gt;true&lt;/required&gt;</span><br><span class=\"line\">\t\t&lt;fragment&gt;true&lt;/fragment&gt;</span><br><span class=\"line\">\t&lt;/attribute&gt;\t</span><br><span class=\"line\">&lt;/tag&gt;</span><br></pre></td></tr></table></figure>\n<p>然后就可以在jsp中导入使用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;myTag:person name=&quot;xxx&quot; gender=&quot;male&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-2-2-开发动态属性的标签\"><a href=\"#3-2-2-开发动态属性的标签\" class=\"headerlink\" title=\"3.2.2 开发动态属性的标签\"></a>3.2.2 开发动态属性的标签</h5><p>上面我们开发属性时，必须确切知道什么属性以及多少个。但如果标签的属性个数以及名字未知，我们便不好处理，这种情况下必须利用动态属性来进行开发。开发动态属性标签，除了继承SimpleTagSupport之外，还需要实现一个接口，DynamicAttributes，实现其中的setDynamicAttribute()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleTagSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">DynamicAttributes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//保存每个属性的名字</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;String&gt; keys = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t<span class=\"comment\">//保存每个属性的属性值</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;Object&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTag</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JspException, IOException </span>&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDynamicAttributes</span> <span class=\"params\">(String uri, String localName, String value)</span> <span class=\"keyword\">throws</span> JspException </span>&#123;</span><br><span class=\"line\">\t\tkeys.add(localName);</span><br><span class=\"line\">\t\tvalues.add(value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在tld的tag定义中，记得将<code>&lt;dynamic-attributes&gt;true&lt;/dynamic-attributes&gt;</code></p>\n<h4 id=\"3-3-在jsp中使用自定义标签\"><a href=\"#3-3-在jsp中使用自定义标签\" class=\"headerlink\" title=\"3.3 在jsp中使用自定义标签\"></a>3.3 在jsp中使用自定义标签</h4><p>如何在jsp中使用自定义标签库，我们在编译指令中已经说明。利用taglib编译指令以及uri进行标签库导入，为导入标签库创造一个prefix前缀，这样就可以在当前jsp中使用标签库中的标签了。具体使用看编译指令的taglib用法。  </p>\n<p>JSP作为J2EE的两个基本组件之一(另一个是servlet)，使用起来比较简单，语法也比较简单。</p>\n"}