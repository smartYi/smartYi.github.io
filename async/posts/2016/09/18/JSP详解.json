{"tags":[{"name":"JSP","permalink":"http://www.smartyi8979.com/tags/JSP/","url":"/async/tags/JSP.json","count":1},{"name":"Servlet","permalink":"http://www.smartyi8979.com/tags/Servlet/","url":"/async/tags/Servlet.json","count":1}],"categories":[{"name":"ssh开发从入门到出家","permalink":"http://www.smartyi8979.com/categories/ssh开发从入门到出家/","url":"/async/categories/ssh开发从入门到出家.json","count":2}],"url":"/async/posts/2016/09/18/JSP详解.json","date":1474265625000,"path":{"year":2016,"month":9,"day":18,"name":"JSP详解"},"title":"JSP详解","permalink":"http://www.smartyi8979.com/2016/09/18/JSP详解/","content":"<h3 id=\"1-什么是JSP\"><a href=\"#1-什么是JSP\" class=\"headerlink\" title=\"1. 什么是JSP\"></a>1. 什么是JSP</h3><p>JSP(Java Server Page)是一种在HTML页面中掺杂java语句从而能够动态生成HTML页面的一种技术。JSP的出现改善了在servlet中利用java对象输出大量难读，难写的html标签的情况，从而使得servlet专注于控制器层，而JSP等其他相关技术专注于表现层，进一步确立了web  开发过程中MVC模式。  </p>\n<p>JSP的本质依然是一个servlet，当我们编写一个jsp文件之后，客户发起一个请求，这个请求通过servlet转到某个jsp文件，这时候web容器会对当前的jsp文件进行编译，当编译成servlet文件之后，才会执行。因此往往每个jsp文件的第一个访问者，会发现速度很慢，因为jsp文件还未被容器编译成servlet文件。  </p>\n<p>如果开发者是在本地进行的开发，容器用的是Tomcat，可以在Tomcat的work文件夹相对应的web名称下找到容器编译后生成的servlet文件。这也说明了jsp其实是servlet的草稿，它简化了servlet的功能，使得servlet专注控制器部分，而真正运行的是servlet。</p>\n<h3 id=\"2-JSP的使用\"><a href=\"#2-JSP的使用\" class=\"headerlink\" title=\"2. JSP的使用\"></a>2. JSP的使用</h3><p>前面我们说过，jsp是往静态的html语言中插入动态的java语句，从而实现页面的动态输出。那么如何在html语句中实现java语句呢？</p>\n<h4 id=\"2-1-JSP的四种基本语法\"><a href=\"#2-1-JSP的四种基本语法\" class=\"headerlink\" title=\"2.1 JSP的四种基本语法\"></a>2.1 JSP的四种基本语法</h4><p>jsp常用的四种语法分别是：注释，声明，表达式和脚本。</p>\n<ol>\n<li>注释<br>jsp注释语法的格式是：<strong>&lt;%– 这里是注释 –%&gt;</strong><br>jsp的注释内容仅仅提供开发过程的提示作用，最后面输出到客户端的html代码中是无法看见jsp注释的。这有别于html代码的注释，html的注释是可以在客户端的源码。</li>\n<li>声明<br>jsp声明的语法格式是:<strong>&lt;%! 这里是声明内容 %&gt;</strong><br>之前提到，jsp会在运行的时候由容器编译成servlet文件，而servlet是一个java 对象，因此在jsp中进java变量或者方法的声明和在servlet中的声明是一样的。容器会在编译的时候将jsp中声明的变量和方法编译到对应的servlet中去，且接受private，public，static等修饰符，但不接受abstract修饰，一旦被abstract修饰，编译生成的servlet将会成为抽象类，无法被实例化。值得注意的是，容易编译servlet时，每个servlet在容器中只存在一个实例。</li>\n<li>表达式<br>jsp输出表达式的语法格式：<strong>&lt;%=表达式(注意jsp表达式后面无需添加分号表示结束)%&gt;</strong><br>jsp中的表达式语句在对应的servlet中将会编译为out.print()语句。因此起到的作用就是简化jsp的输出语法。</li>\n<li>脚本<br>jsp脚本的语法格式是：<strong>&lt;% 这里是java程序 %&gt;</strong><br>嵌套在<strong>&lt;% %&gt;</strong>中的java代码就是jsp中的java脚本，<strong><em>jsp中的java脚本将会被容器编译成Service()方法中的可执行代码，因此对于jsp脚本来说，不能在其中定义方法，因为在java中我们不允许在方法中定义方法。</em></strong></li>\n</ol>\n<p>以上四种就是jsp的四种基本语法，理解这四种基本语法在于理解他们分别在jsp编译成的servlet中起到什么作用，与我们以往学习的知识进行连接，才不会出错。</p>\n<h4 id=\"2-2-JSP的三大基本编译指令\"><a href=\"#2-2-JSP的三大基本编译指令\" class=\"headerlink\" title=\"2.2 JSP的三大基本编译指令\"></a>2.2 JSP的三大基本编译指令</h4><p>jsp的编译指令不直接生成输出，这些编译指令会通知jsp引擎或者servlet引擎对当前的jsp文件在进行编译的过程中起作用。常用的编译指令有：page， include和taglib。  </p>\n<ol>\n<li>page： 指定的编译指令是针对当前页面</li>\n<li>include： 用于指定当前页面包含另一个页面，通常是静态包含</li>\n<li>taglib： 用于定义和访问自定义的标签</li>\n</ol>\n<p>在jsp中插入编译指令的语法是： &lt;%@ 编译指令名 属性名1=“属性值1” 属性名2=“属性值2” …%&gt;注意，各属性定义之间不要用符号分隔开。</p>\n<h5 id=\"2-2-1-page编译指令\"><a href=\"#2-2-1-page编译指令\" class=\"headerlink\" title=\"2.2.1 page编译指令\"></a>2.2.1 page编译指令</h5><p>page常用的属性有：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>language</td>\n<td>声明当前页面脚本的语言，默认为java</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>指定jsp编译成servlet之后所需要继承的类，或者所实现的接口</td>\n</tr>\n<tr>\n<td>import</td>\n<td>常用的，用于导入当前脚本中可能使用到的其他包里面的类</td>\n</tr>\n<tr>\n<td>info</td>\n<td>包含jsp的信息，一般作为当前jsp文件的说明用。可以通过getServletInfo()来获取</td>\n</tr>\n<tr>\n<td>errorPage</td>\n<td>常用。指定当前jsp文件发生错误时，自动调用改属性值指定的jsp文件。如果不指定当前属性值，当发生错误时，会抛出异常信息给客户。</td>\n</tr>\n<tr>\n<td>contentType</td>\n<td>指定生成网页的文件格式和编码字符集</td>\n</tr>\n<tr>\n<td>isErrorPage</td>\n<td>用于指定当前jsp文件是否为错误处理jsp文件</td>\n</tr>\n</tbody>\n</table>\n<p>一个常见的jsp编译指令的使用可能是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--指定脚本语言是java，指定生成网页的文件格式和编码字符集--%&gt;</span><br><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GBK&quot; %&gt;</span><br><span class=\"line\">&lt;%--指定导入的包的位置--%&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.package.*&quot; %&gt;</span><br><span class=\"line\">&lt;%--指定当前jsp文件发生错误时，处理错误的jsp文件--%&gt;</span><br><span class=\"line\">&lt;%@ page errorPage=&quot;error.jsp&quot; %&gt;</span><br><span class=\"line\">&lt;%--说明当前jsp文件不是用来处理错的jsp文件--%&gt;</span><br><span class=\"line\">&lt;%@ page isErrorPage=&quot;false&quot;%&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-2-include编译指令\"><a href=\"#2-2-2-include编译指令\" class=\"headerlink\" title=\"2.2.2 include编译指令\"></a>2.2.2 include编译指令</h5><p>include编译指令，可以将一个外部文件静态导入到当前的jsp文件当中，使得当前jsp文件在生成servlet后会嵌入外部文件所生成的代码。include指令可以包含一个静态的文本，也可以导入动态的jsp文件。注意，这里说的静态导入和动态jsp文件不是指的一回事，导入动态jsp文件并不意味着动态导入，而依然是静态导入。指令格式如下：<br><strong>&lt;%@ include file=”xxx.txt”%&gt;</strong>或者<strong>&lt;%@ include file=”xxx.jsp”%&gt;</strong><br>jsp的include静态导入对象如果是一个jsp文件的话，静态导入的结果还会把目标jsp文件的编译指令导入进来，因此如果两个jsp文件的编译指令发生冲突，那么在容器生成servlet的过程中就会发生错误。</p>\n<h5 id=\"2-2-3-taglib编译指令\"><a href=\"#2-2-3-taglib编译指令\" class=\"headerlink\" title=\"2.2.3 taglib编译指令\"></a>2.2.3 taglib编译指令</h5><h4 id=\"2-3-JSP的七大动作指令\"><a href=\"#2-3-JSP的七大动作指令\" class=\"headerlink\" title=\"2.3 JSP的七大动作指令\"></a>2.3 JSP的七大动作指令</h4><h4 id=\"2-4-JSP的九大内置对象\"><a href=\"#2-4-JSP的九大内置对象\" class=\"headerlink\" title=\"2.4 JSP的九大内置对象\"></a>2.4 JSP的九大内置对象</h4><h3 id=\"3-开发自己的JSP标签库\"><a href=\"#3-开发自己的JSP标签库\" class=\"headerlink\" title=\"3. 开发自己的JSP标签库\"></a>3. 开发自己的JSP标签库</h3><h3 id=\"4-JSP补充\"><a href=\"#4-JSP补充\" class=\"headerlink\" title=\"4. JSP补充\"></a>4. JSP补充</h3>"}