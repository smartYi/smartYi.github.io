{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":74},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":75}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":77}],"url":"/async/posts/2016/03/26/N-Queens.json","date":1459046673000,"path":{"year":2016,"month":3,"day":26,"name":"N-Queens"},"title":"Sudoku Solver","permalink":"http://www.smartyi8979.com/2016/03/26/N-Queens/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.<br><a id=\"more\"></a></p>\n<p>Given an integer n, return all distinct solutions to the n-queens puzzle.</p>\n<p>Each solution contains a distinct board configuration of the n-queens’ placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">There exist two distinct solutions to the 4-queens puzzle:</span><br><span class=\"line\">[</span><br><span class=\"line\"> [&quot;.Q..&quot;,  // Solution 1</span><br><span class=\"line\">  &quot;...Q&quot;,</span><br><span class=\"line\">  &quot;Q...&quot;,</span><br><span class=\"line\">  &quot;..Q.&quot;],</span><br><span class=\"line\"></span><br><span class=\"line\"> [&quot;..Q.&quot;,  // Solution 2</span><br><span class=\"line\">  &quot;Q...&quot;,</span><br><span class=\"line\">  &quot;...Q&quot;,</span><br><span class=\"line\">  &quot;.Q..&quot;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>经典的八皇后问题的通俗版本，N皇后。<br>解题规则：</p>\n<ul>\n<li>每行只能一个皇后；</li>\n<li>每列只能一个皇后；</li>\n<li>任意两个皇后不能在对角线上；</li>\n</ul>\n<p>其实这个题目和解数独那道题目很相似，只不过在数独那里，题目给出了board，在这里我们需要自己构建board，另外还要考虑合法条件。除此之外，基本一样。值得注意的是在两次的解题过程中，判断合法性是在设置之前，也就是说我接下来要设置某个cell，但是我先判定如果我在这里设置是否合法，合法继续进行；否则就跳到下一次循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[][] board = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n][n];</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; ret = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[][] baord = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) board[i][j] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        helper(ret, <span class=\"number\">0</span>, board);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(List&lt;List&lt;String&gt;&gt; ret, <span class=\"keyword\">int</span> colIndex, <span class=\"keyword\">char</span>[][] board)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (colIndex == board.length) &#123;</span><br><span class=\"line\">            ret.add(build(board));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isValid(board, i, colIndex)) &#123;</span><br><span class=\"line\">                board[i][colIndex] = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">                helper(ret, colIndex + <span class=\"number\">1</span>, board);</span><br><span class=\"line\">                board[i][colIndex] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'Q'</span> &amp;&amp; (row == i || (row + col == i + j) || (row + j ==  col + i))) </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;String&gt; <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; ret = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">            StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; board.length; j++) &#123;</span><br><span class=\"line\">                sb.append(board[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ret.add(sb.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里解八皇后的问题中，我们是按照列来解答的，我们当然也可以按照行来解答。但至少我们要固定一个维度，使得判定条件简单的多。我就是在这里折腾了很久，看了讨论区才明白过来。</p>\n"}