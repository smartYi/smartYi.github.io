{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":79},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":80}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":82}],"url":"/async/posts/2016/03/26/Add-and-Search-Word.json","date":1459041693000,"path":{"year":2016,"month":3,"day":26,"name":"Add-and-Search-Word"},"title":"Add and Search Word - Data structure design","permalink":"http://www.smartyi8979.com/2016/03/26/Add-and-Search-Word/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>Design a data structure that supports the following two operations:<br><a id=\"more\"></a></p>\n<blockquote>\n<p>void addWord(word)<br>bool search(word)</p>\n</blockquote>\n<p>search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example:</span><br><span class=\"line\"></span><br><span class=\"line\">addWord(&quot;bad&quot;)</span><br><span class=\"line\">addWord(&quot;dad&quot;)</span><br><span class=\"line\">addWord(&quot;mad&quot;)</span><br><span class=\"line\">search(&quot;pad&quot;) -&gt; false</span><br><span class=\"line\">search(&quot;bad&quot;) -&gt; true</span><br><span class=\"line\">search(&quot;.ad&quot;) -&gt; true</span><br><span class=\"line\">search(&quot;b..&quot;) -&gt; true</span><br></pre></td></tr></table></figure>\n<p>Note:<br>You may assume that all words are consist of lowercase letters a-z.</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>构建字典树，然后搜索。构建字典树在之前已经多次实现，其实字典树就是一棵多叉树。搜索比较麻烦的是可能存在’.’字符，而这个字符代表通用字符，那么我们就需要搜索所有可能的情况，然后取或值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDictionary</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span> </span>&#123;</span><br><span class=\"line\">        TrieNode[] next = <span class=\"keyword\">new</span> TrieNode[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isWord = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrieNode root = <span class=\"keyword\">new</span> TrieNode();</span><br><span class=\"line\">    <span class=\"comment\">// Adds a word into the data structure.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addWord</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] arr = word.toCharArray();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : arr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.next[c - <span class=\"string\">'a'</span>] == <span class=\"keyword\">null</span>) node.next[c - <span class=\"string\">'a'</span>] = <span class=\"keyword\">new</span> TrieNode();</span><br><span class=\"line\">            node = node.next[c - <span class=\"string\">'a'</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.isWord = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns if the word is in the data structure. A word could</span></span><br><span class=\"line\">    <span class=\"comment\">// contain the dot character '.' to represent any one letter.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(root, word.toCharArray(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">helper</span><span class=\"params\">(TrieNode node, <span class=\"keyword\">char</span>[] word, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &gt;= word.length) <span class=\"keyword\">return</span> node.isWord;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ret = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = word[start];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.next[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    ret = ret || helper(node.next[i], word, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> (node.next[c - <span class=\"string\">'a'</span>] != <span class=\"keyword\">null</span> &amp;&amp; helper(node.next[c - <span class=\"string\">'a'</span>], word, start + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题还算简单。</p>\n"}