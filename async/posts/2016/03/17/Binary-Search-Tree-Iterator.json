{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":49},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":47},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":47}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":51}],"url":"/async/posts/2016/03/17/Binary-Search-Tree-Iterator.json","date":1458190168000,"path":{"year":2016,"month":3,"day":17,"name":"Binary-Search-Tree-Iterator"},"title":"Binary Search Tree Iterator","permalink":"http://www.smartyi8979.com/2016/03/17/Binary-Search-Tree-Iterator/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.<br>Calling next() will return the next smallest number in the BST.<br><a id=\"more\"></a><br><strong>Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</strong></p>\n<h4 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h4><p>很明确。叫你实现一个BST的迭代器，每次next()方法都会返回当前BST中最小值。</p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>其实就是变相考察二叉树的前序遍历，因为BST的前序遍历就是先读取BST中最小的元素。<br>有了这点认识，我们就好做了。<br>当然二叉树的遍历可以分为递归和迭代，这里当然不是递归，-_-#。 那么迭代的话我们就需要用到栈。<br>那就顺带复习一下树的前序遍历(迭代版)。  </p>\n<ul>\n<li>维护一个栈，刚开始是一路将二叉树的最左边元素push进去；</li>\n<li>每次从栈中pop一个元素，就把这个node的右子树(如果有的话)的最左边push进去；</li>\n<li>反复这样，直至遍历结束</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSTIterator</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack;</span><br><span class=\"line\">    TreeNode nextTreeNode;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BSTIterator</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        stack = <span class=\"keyword\">new</span> Stack&lt;TreeNode&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root = root.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@return</span> whether we have a next smallest number */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@return</span> the next smallest number */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        nextTreeNode = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextTreeNode.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            TreeNode right = nextTreeNode.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                stack.push(right);</span><br><span class=\"line\">                right = right.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextTreeNode.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变相考察树的遍历。如果想看树的三种遍历的递归和迭代版，<a href=\"\">请戳这里</a>！</p>\n"}