{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":48},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":46},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":46}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":50}],"url":"/async/posts/2016/03/17/Game-of-life.json","date":1458245603000,"path":{"year":2016,"month":3,"day":17,"name":"Game-of-life"},"title":"Game of life","permalink":"http://www.smartyi8979.com/2016/03/17/Game-of-life/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):<br><a id=\"more\"></a></p>\n<ul>\n<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>\n<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>\n<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n</ul>\n<p>Write a function to compute the next state (after one update) of the board given its current state.</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>哇！题目好长啊。其实就是模拟生态圈的一个题目。要求是in-place。刚开始我写这个题目，写了我100接近行代码啊，虽然过了，但显然不是最优解。因此我就不贴了。<br>好，开始逛讨论区，讨论区提出一个解法是bit manipulation。 WTF(udge)，这题目还能用bit解？于是我就耐心看完了他的解释，顿时佩服得五体投地。总体思路是这样的：</p>\n<p>用一个两位的bit表示当前cell的生活状态和下一阶段的生活状态，那么其实就只有四种情况；</p>\n<p><strong><em>[next status, current status]:  [00][01][10][11]</em></strong></p>\n<ol>\n<li>当前存活，下一阶段死亡，对应于[01]；</li>\n<li>当前存活，下一阶段存活，对应于[11]；</li>\n<li>当前死亡，下一阶段存活，对应于[10]；</li>\n<li>当前死亡，下一阶段死亡，对应于[00]；</li>\n</ol>\n<p>而且们只关心下一状态还会存活的cell的状况，那么也就是情况2和3。根据题意，如果当前死亡，下一阶段要是复活的话，邻居必须有三个目前处于存活状态；如果当前存活，下一阶段继续存活的话，邻居必须有两个到三个目前处于存活状态；其余情况不与考虑；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">gameOfLife</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] board)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board == <span class=\"keyword\">null</span> || board[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = board.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> number = check(board, i, j, row, col);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((number &gt;= <span class=\"number\">2</span> &amp;&amp; number &lt;= <span class=\"number\">3</span>) &amp;&amp; board[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    board[i][j] += <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (number == <span class=\"number\">3</span> &amp;&amp; board[i][j] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    board[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                board[i][j] &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] board, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = Math.max(i-<span class=\"number\">1</span>, <span class=\"number\">0</span>); x &lt;= Math.min(i + <span class=\"number\">1</span>, row - <span class=\"number\">1</span>); x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = Math.max(j - <span class=\"number\">1</span>, <span class=\"number\">0</span>); y &lt;= Math.min(j + <span class=\"number\">1</span>, col - <span class=\"number\">1</span>); y++) &#123;</span><br><span class=\"line\">                ret += (board[x][y] &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ret -= (board[i][j] &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有点难度，解法pretty cool，huh？</p>\n"}