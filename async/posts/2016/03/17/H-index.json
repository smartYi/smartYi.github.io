{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":53},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":51},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":51}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":55}],"url":"/async/posts/2016/03/17/H-index.json","date":1458239760000,"path":{"year":2016,"month":3,"day":17,"name":"H-index"},"title":"H-index","permalink":"http://www.smartyi8979.com/2016/03/17/H-index/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher’s h-index.</p>\n<a id=\"more\"></a>\n<p><strong>According to the definition of h-index on Wikipedia: “A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.”</strong></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>给你一个数组，代表一个研究员发表论文的引用指数，叫你求出这个研究员的H-index。所谓的H-index就是至少有k篇文章的引用是在k次以上；<br>比如：<br><strong>given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.</strong></p>\n<p>刚开始写的时候完全没头绪啊。-_-#。后来看了一下提示，说想想看给定一个数组最大的H-index指数是多少。 想了想，好像最大的数字就是数组长度。有了这点，心里稍微靠谱了一点。<br>那么我们就来统计数组中出现的引用次数，但是如果引用次数大于数组长度的一律归于最大H-index，也就是数组长度那组引用的统计。有了每个引用的统计之后，那么就是相加了，把相加得到的结果和当前的index相比，如果不小于，那么H-index就是它了。<br>好抽象，自己都不能理解自己说的。边看代码边理解吧，毕竟这是我觉得这是一个很好的解法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int hIndex(int[] citations) &#123;</span><br><span class=\"line\">        if (citations == null || citations.length == 0) return 0;</span><br><span class=\"line\">        int length = citations.length;</span><br><span class=\"line\">        int[] arr2 = new int[length + 1];</span><br><span class=\"line\">        int ret = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            int cur = citations[i];</span><br><span class=\"line\">            if (cur &gt;= length) &#123;</span><br><span class=\"line\">                arr2[length]++;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                arr2[cur]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = length; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">            ret += arr2[i];</span><br><span class=\"line\">            if (ret &gt;= i) &#123;</span><br><span class=\"line\">                return i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么问题来了，这里的时间复杂度是多少，显然是<em>\\(O(n)\\)</em>。那么其实还有一种更加直观的方法，先把数组排序，排好序之后用二分查找。虽然二分查找很高效，但是数组排序再怎么样也要<em>||(O(nlogn)\\)</em>的时间复杂度。<br>好，那么果然就有follow-up了。而follow-up就是问你，如果数组已经有序，如何求出H-index.</p>\n<p>就像上面提到的，用二分查找。因为已经排序，那么每次选取数组中间元素和它之后的元素的数量相比较(包括它本身)，那么就有两种情况：</p>\n<p>假设数组长度n，搜索起始元素start，终点元素end，中间元素mid；那么包括中间元素本身的后面元素的数量是\\(n-mid\\).</p>\n<ul>\n<li>当前元素的值和它之后元素的数量相同，那么证明至少有\\(n-mid\\)个元素是大于\\(n-mid\\)的，那么直接返回就好；</li>\n<li>当前元素小于它之后的元素的数量，那么证明后面元素数量过多或者本身元素值太小，甭管什么原因，出现在它之前的那些元素都不可能是答案了，所以start＋1；</li>\n<li>当前元素大于它之后的元素的数量，那么证明后面元素数量过少或者本身元素值太大，甭管什么原因，出现在它之后的那些元素都不可能是答案了，所以end－1；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] citations)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Since the array is already sorted, the main idea is to use binary search</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (citations == <span class=\"keyword\">null</span> || citations.length &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(citations.length == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> citations[<span class=\"number\">0</span>] == <span class=\"number\">0</span>?<span class=\"number\">0</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = citations.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt;= end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = start + (end-start)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (citations[mid] == n - mid) <span class=\"keyword\">return</span> n-mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(citations[mid] &lt; n-mid) start = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> end = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n-start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个题目还是有难度的。</p>\n"}