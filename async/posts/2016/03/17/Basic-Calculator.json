{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":30},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":28},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":28}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":32}],"url":"/async/posts/2016/03/17/Basic-Calculator.json","date":1458191933000,"path":{"year":2016,"month":3,"day":17,"name":"Basic-Calculator"},"title":"Basic Calculator","permalink":"http://www.smartyi8979.com/2016/03/17/Basic-Calculator/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a valid arithmetic equation, calculate the result.<br><a id=\"more\"></a></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>真的很难。注意题目不会出现负数这种情况，只会出现减正数。<br>There are only five cases we should handle:</p>\n<ul>\n<li>digit: it should be one digit from the current number</li>\n<li>‘+’: number is over, we can add the previous number and start a new number</li>\n<li>‘-‘: same as above</li>\n<li>‘(‘: push the previous result and the sign into the stack, set result to 0, just calculate the new result within the parenthesis.</li>\n<li>‘)’: pop out the top two numbers from stack, first one is the sign before this pair of parenthesis, second is the temporary result before this pair of parenthesis. We add them together. </li>\n</ul>\n<p>翻译过来也就是说：<br>在整个字符串中我们只需要考虑五种情况  </p>\n<ol>\n<li>数字。如果是数字，我们单纯的只是把当前的所有数字加起来，</li>\n<li>‘+’符号。 如果是’+’号，证明之前的数字结束，要开始一个新的数字，而且这个数字的符号是正号；</li>\n<li>‘－’符号。 如果是’－’号，证明之前的数字结束，要开始一个新的数字，而且这个数字的符号是负号；</li>\n<li>‘(‘符号。 如果是’(‘号，证明之前的运算结束，要开始一个新的小运算部分，而且这部分运算的符号是之前存放的符号；</li>\n<li>‘)’符号。 如果是’)’号，证明之前的小运算部分结束，要把这小部分的运算结果计算出来，然后再找出之前存放的关于这部分运算的符号；</li>\n</ol>\n<p>哎，真是很难，解释得不清楚的。直接看代码，大家理会下。 这里用到的数据结构时栈。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Character.isDigit(c))&#123;</span><br><span class=\"line\">            number = <span class=\"number\">10</span> * number + (<span class=\"keyword\">int</span>)(c - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'+'</span>)&#123;</span><br><span class=\"line\">            result += sign * number;</span><br><span class=\"line\">            number = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">            result += sign * number;</span><br><span class=\"line\">            number = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sign = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//we push the result first, then sign;</span></span><br><span class=\"line\">            stack.push(result);</span><br><span class=\"line\">            stack.push(sign);</span><br><span class=\"line\">            <span class=\"comment\">//reset the sign and result for the value in the parenthesis</span></span><br><span class=\"line\">            sign = <span class=\"number\">1</span>;   </span><br><span class=\"line\">            result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">')'</span>)&#123;</span><br><span class=\"line\">            result += sign * number;  </span><br><span class=\"line\">            number = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result *= stack.pop();    <span class=\"comment\">//stack.pop() is the sign before the parenthesis</span></span><br><span class=\"line\">            result += stack.pop();   <span class=\"comment\">//stack.pop() now is the result calculated before the parenthesis</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(number != <span class=\"number\">0</span>) result += sign * number;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>真的是不容易啊。 -_-#。 </p>\n"}