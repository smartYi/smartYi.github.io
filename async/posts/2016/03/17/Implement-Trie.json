{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":49},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":47},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":47}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":51}],"url":"/async/posts/2016/03/17/Implement-Trie.json","date":1458191448000,"path":{"year":2016,"month":3,"day":17,"name":"Implement-Trie"},"title":"Implement Trie","permalink":"http://www.smartyi8979.com/2016/03/17/Implement-Trie/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Implement a trie with <code>insert, search</code>, and <code>startsWith</code> methods.<br><a id=\"more\"></a></p>\n<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>实现一棵前缀树，也就是字典树。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>由于题目给定只包含26个小写字母，那么就设计一个node，每个node有26个子node，这样会有空间损失，但是还是能够大体满足要求。当然也可以用map，set等之类的数据结构。<br>此外对于每个node来说要有一个标记，标记到目前这个node为止，是否是一个单词。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize your data structure here.</span></span><br><span class=\"line\">    TrieNode[] children;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isWord;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isPrefix;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrieNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        children = <span class=\"keyword\">new</span> TrieNode[<span class=\"number\">26</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrieNode</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children = <span class=\"keyword\">new</span> TrieNode[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isWord = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isPrefix = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrieNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Trie</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TrieNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Inserts a word into the trie.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = word.length();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = word.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = cur - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.children[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                node.children[index] = <span class=\"keyword\">new</span> TrieNode(cur);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.isWord = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns if the word is in the trie.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = word.length();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = word.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = cur - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.children[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isWord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns if there is any word in the trie</span></span><br><span class=\"line\">    <span class=\"comment\">// that starts with the given prefix.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = prefix.length();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = prefix.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = cur - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.children[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isPrefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>感觉search和startWith方法代码重复了，是否可以优化呢？</p>\n"}