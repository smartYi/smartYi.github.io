{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":67},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":63}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":69}],"url":"/async/posts/2016/03/17/Patching-array.json","date":1458264023000,"path":{"year":2016,"month":3,"day":17,"name":"Patching-array"},"title":"Patching array","permalink":"http://www.smartyi8979.com/2016/03/17/Patching-array/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">nums = [1, 3], n = 6</span><br><span class=\"line\">Return 1.</span><br><span class=\"line\"></span><br><span class=\"line\">Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.  </span><br><span class=\"line\">Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].  </span><br><span class=\"line\">Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].</span><br><span class=\"line\">So we only need 1 patch.</span><br><span class=\"line\"></span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">nums = [1, 5, 10], n = 20</span><br><span class=\"line\">Return 2.</span><br><span class=\"line\">The two patches can be [2, 4].</span><br><span class=\"line\"></span><br><span class=\"line\">Example 3:</span><br><span class=\"line\">nums = [1, 2, 2], n = 5</span><br><span class=\"line\">Return 0.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>解法实在太过逆天。估计自己想破脑袋也无法想到。思路大致如下：<br><strong><em>假设当前数组已经能够完整表达\\([0,miss)\\)之间的所有数字，那么接下来有两种情况：</em></strong></p>\n<ul>\n<li>数组中存在\\(nums[i] &lt;= miss\\),这意味着在当前能够表达的完整数字中，接下来的这个$nums[i]$可以将这个完整表达范围继续扩展下去，扩展的范围是\\(miss + nums[i]\\);</li>\n<li>数组中不存在\\(nums[i] &lt;= miss\\)，那么我们就必须为数组打补丁，最好的补丁就是自己本身，这样会尽可能使得表达范围增长，因此\\(miss = miss * 2\\)；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPatches</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur &lt;= n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; nums.length &amp;&amp; nums[index] &lt;= cur) &#123;</span><br><span class=\"line\">                cur += nums[index++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur += cur;</span><br><span class=\"line\">                ret++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码刚开始假设数组能够完整表达\\([0,1)\\)开始，这也是合理的，因为就算数组是空数组，表达范围就是\\([0,1)\\)，接下来如果表达范围一直在目标范围里面，就继续将循环进行下去；值得注意的是每次进行判定的number的index必须随着每次miss扩展而进行移动，否则就会出现重复计算，导致TLE.</p>\n"}