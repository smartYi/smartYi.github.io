{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":84}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/17/Number-of-Islands.json","date":1458190853000,"path":{"year":2016,"month":3,"day":17,"name":"Number-of-Islands"},"title":"Number of Islands I&II","permalink":"http://www.smartyi8979.com/2016/03/17/Number-of-Islands/","content":"<h4 id=\"Problem-1\"><a href=\"#Problem-1\" class=\"headerlink\" title=\"Problem 1:\"></a>Problem 1:</h4><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<br><a id=\"more\"></a></p>\n<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>求解岛屿数量。给定一个二维数组，1代表陆地，0代表水。岛屿意味着周围被水包围(垂直和水平方向，不包含对角线方向)。且整个数组周围都是水。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>典型的union find题目。给定一组连通图，求出连通图的个数。</p>\n<p>DFS和BFS都行。每次走过一个陆地之后，把它变成水，这样之后就不会再次走到了。  </p>\n<p>这里是DFS版。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        m = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] != <span class=\"string\">'1'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"comment\">//只要是陆地，证明是一块新的岛屿。</span></span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                dfs(grid, i , j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= m || j &lt; <span class=\"number\">0</span> || j &gt;= n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把走过的陆地变成水。</span></span><br><span class=\"line\">            grid[i][j] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            dfs(grid, i-<span class=\"number\">1</span>, j);</span><br><span class=\"line\">            dfs(grid, i+<span class=\"number\">1</span>, j);</span><br><span class=\"line\">            dfs(grid, i, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            dfs(grid, i, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC2: BFS</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid == <span class=\"keyword\">null</span> || grid.length == <span class=\"number\">0</span> || grid[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                    System.out.println(ret);</span><br><span class=\"line\">                    ret++;</span><br><span class=\"line\">                    bfs(grid, i, j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        Deque&lt;<span class=\"keyword\">int</span>[]&gt; deque = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dx = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dy = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        deque.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x, y&#125;);</span><br><span class=\"line\">        grid[x][y] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (deque.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] cur = deque.poll();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"here\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextX = cur[<span class=\"number\">0</span>] + dx[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextY = cur[<span class=\"number\">1</span>] + dy[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextX &gt;= <span class=\"number\">0</span> &amp;&amp; nextX &lt; grid.length &amp;&amp; nextY &gt;= <span class=\"number\">0</span> </span><br><span class=\"line\">                    &amp;&amp; nextY &lt; grid[<span class=\"number\">0</span>].length &amp;&amp; grid[nextX][nextY] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">                        grid[nextX][nextY] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                        deque.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nextX, nextY&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不知道怎么的，代码一样的，不同时候跑，有时候不通过有时候又通过。然后我对比了一下BFS和BFS的运行时间，未免相差太远。BFS：260+，DFS：3ms。</p>\n<p>比较简单的union find题目，重点是要看破本质啊。 -_-#。</p>\n<h4 id=\"Problem-2\"><a href=\"#Problem-2\" class=\"headerlink\" title=\"Problem 2:\"></a>Problem 2:</h4><p>A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>之前是叫你求解出岛屿的数量，但在那里岛屿的数量是不会变化的。而在这里不断有水变成岛屿。然后叫你求解岛屿的数量。当然你还是可以按照上面那种方法求解，但显然这里另有他法。</p>\n<p>这里的岛屿动态变化，如果每变化一次，你都按照BFS或者DFS方法去解答，未免太耗内存。稍作分析，会发现每次新增岛屿其实只会影响它周围四个元素的状态，而这些状态我们可以实现存储。利用hash值我们为每个元素打上独特的id，然后再根据周围元素的id来更新当前的id；</p>\n<ul>\n<li>构建一个所有元素大小的hash数组值，然后根据元素的坐标为当前岛屿打上id，然后我们预设当前新增岛屿不和周围任何岛屿相连，岛屿数量加1；</li>\n<li>然后找出当前新增岛屿的周围四个元素的状态，如果是岛屿，找出周围岛屿的id，注意每个相连的岛屿都有一个根id，我们需要利用这个根id来更新新增岛屿的id；</li>\n<li>找到周围的元素的根id和当前岛屿的id不一样，那么证明周围还存在不同的岛屿，而且那个岛屿和这个新增岛屿相连，那么把当前岛屿的id更新为周围岛屿的id，然后数量减1；</li>\n<li>遍历周围四个元素，每一个进行相应判断即可；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">numIslands2</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[][] positions)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (positions == <span class=\"keyword\">null</span> || positions[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] root = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m * n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Arrays.fill(root, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dx = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] cur : positions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hash = n * cur[<span class=\"number\">0</span>] + cur[<span class=\"number\">1</span>];</span><br><span class=\"line\">            root[hash] = hash;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextX = cur[<span class=\"number\">0</span>] + dx[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextY = cur[<span class=\"number\">1</span>] + dy[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> prev = n * nextX + nextY;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextX &lt; m &amp;&amp; nextX &gt;= <span class=\"number\">0</span> &amp;&amp; nextY &lt; n &amp;&amp; nextY &gt;= <span class=\"number\">0</span> &amp;&amp; root[prev] != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tag = findTag(root, prev);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tag != hash) &#123;</span><br><span class=\"line\">                        root[hash] = tag;</span><br><span class=\"line\">                        hash = tag;</span><br><span class=\"line\">                        count--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ret.add(count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findTag</span><span class=\"params\">(<span class=\"keyword\">int</span>[] roots, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(id != roots[id]) &#123;</span><br><span class=\"line\">            roots[id] = roots[roots[id]];</span><br><span class=\"line\">            id = roots[id];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这才是检查连通性问题，而且是解决动态连通性问题。</p>\n"}