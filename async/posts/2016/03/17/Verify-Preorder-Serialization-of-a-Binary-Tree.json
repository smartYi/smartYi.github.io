{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":76},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":77}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":79}],"url":"/async/posts/2016/03/17/Verify-Preorder-Serialization-of-a-Binary-Tree.json","date":1458264413000,"path":{"year":2016,"month":3,"day":17,"name":"Verify-Preorder-Serialization-of-a-Binary-Tree"},"title":"Verify Preorder Serialization of a Binary Tree","permalink":"http://www.smartyi8979.com/2016/03/17/Verify-Preorder-Serialization-of-a-Binary-Tree/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node’s value. If it is a null node, we record using a sentinel value such as <code>#</code>.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</span><br><span class=\"line\">Return true</span><br><span class=\"line\"></span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">&quot;1,#&quot;</span><br><span class=\"line\">Return false</span><br><span class=\"line\"></span><br><span class=\"line\">Example 3:</span><br><span class=\"line\">&quot;9,#,#,1&quot;</span><br><span class=\"line\">Return false</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>我的思路是用栈，但凡遇到一个数字后面拖着两个<code>#</code>号，就把整个置换为一个<code>#</code>，然后如果是合法的树的前序遍历，最后栈中只会剩一个<code>#</code>。</p>\n<p>由于题目都给定的字符串是：<code>9,3,4,#,#,1,#,#,2,#,6,#,#</code>这种形式的，因此通过分析可以知道，每一个数字后面跟着两个\\(#\\)$符号，可以将其一并消除，然后用一个\\(#\\)替换，这样子到最后整个字符串应该只剩下一个字符，且该字符为\\(#\\)。</p>\n<p>我模拟一遍过程,对于<code>9,3,4,#,#,1,#,#,2,#,6,#,#</code>：  </p>\n<ul>\n<li>9,3,4,#,# =&gt; 9,3,# 继续读</li>\n<li>9,3,#,1,#,# =&gt; 9,3,#,# =&gt; 9,# 继续读</li>\n<li>9,#2,#,6,#,# =&gt; 9,#,2,#,# =&gt; 9,#,# =&gt; #</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidSerialization</span><span class=\"params\">(String preorder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preorder == <span class=\"keyword\">null</span> || preorder.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Deque&lt;String&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        String[] arr = preorder.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            String cur = arr[i];</span><br><span class=\"line\">            stack.push(cur);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (stack.size() &gt; <span class=\"number\">2</span> &amp;&amp; stack.peek().equals(<span class=\"string\">\"#\"</span>))&#123;</span><br><span class=\"line\">                String temp1 = stack.pop();</span><br><span class=\"line\">                String temp2 = stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp2.equals(<span class=\"string\">\"#\"</span>) &amp;&amp; !stack.peek().equals(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">                    stack.push(<span class=\"string\">\"#\"</span>);   </span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    stack.push(temp2);</span><br><span class=\"line\">                    stack.push(temp1);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() == <span class=\"number\">1</span> &amp;&amp; stack.peek().equals(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，还在讨论区看见了另外一种解法，利用的是<strong>入度和出度的差</strong>。来看看这种思路：</p>\n<p>对于二叉树，我们把空的地方也作为叶子节点（如题目中的#），那么有</p>\n<ul>\n<li>所有的非空节点提供2个出度和1个入度（根除外）</li>\n<li>所有的空节点但提供0个出度和1个入度</li>\n</ul>\n<p>我们在遍历的时候，计算diff = outdegree – indegree. 当一个节点出现的时候，diff – 1，因为它提供一个入度；当节点不是#的时候，diff+2(提供两个出度) 如果序列式合法的，那么遍历过程中diff &gt;=0 且最后结果为0.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidSerialization</span><span class=\"params\">(String preorder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preorder == <span class=\"keyword\">null</span> || preorder.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        String[] nodes = preorder.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> diff = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String node: nodes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--diff &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.equals(<span class=\"string\">\"#\"</span>)) diff += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> diff == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这种方法值得注意的是我们不能单纯的判断整个数组的出度和入度是否相同，还需要在过程中保证入度数量不能大于出度数量。也就是代码中的<code>if (--diff &lt; 0) return false;</code>.</p>\n"}