{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":46},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":44},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":44}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":48}],"url":"/async/posts/2016/03/17/Minimum-Height-Trees.json","date":1458247614000,"path":{"year":2016,"month":3,"day":17,"name":"Minimum-Height-Trees"},"title":"Minimum Height Trees","permalink":"http://www.smartyi8979.com/2016/03/17/Minimum-Height-Trees/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p><a href=\"https://leetcode.com/problems/minimum-height-trees/\" target=\"_blank\" rel=\"external\">Leetcode传送门</a><br>For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.<br><a id=\"more\"></a>  </p>\n<p>Format<br>The graph contains <code>n</code> nodes which are labeled from <code>0</code> to <code>n - 1</code>. You will be given the number <code>n</code> and a list of undirected edges (each edge is a pair of labels).</p>\n<p>You can assume that no duplicate edges will appear in edges. Since all edges are undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in edges.</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>给你一个二维数组，由这个数组构成图。然后问，如果把这个图变成一棵多叉树，使得树的高度最低的根节点。<br>其实事实上，无向图就是一棵多叉树，但是取不同的节点作为根节点会使得这棵树的高度千差万别。那么如何保证树的高度最小呢？<br>仔细想想，当初的直觉就是要找出这个图中最长的那一条路径，然后如果路径上的节点是奇数个，那么就是中间节点作为根节点时树高最小；如果是偶数个，那么中间两个任意一个都行。<br>好吧，有了思路，但是却迟迟无法实现，因为不仅要记录图中每条路径的长度，还要知道路径上的节点。<br>好吧，我又看了讨论区。发现大部分人利用的都是一个叫做“剥洋葱”的方法来解决这个问题。后来我才知道这个就是拓扑排序实现的一部分。<br>思路： </p>\n<ul>\n<li>由于是无向图，且图中没有环，那么对于图中的叶子节点来说，其跟的临接表大小为1；</li>\n<li>找出图中所有临接表大小为1的节点，并且删除和它们相连接的节点的这条连接线；</li>\n<li>每删除一次，判定当前节点的临接表大小是不是1，如果是1，证明它也变成了叶子节点，这个就作为下一步删除的叶子节点‘</li>\n<li>根据上面分析，根节点至多两个，所以叶子节点最后的数量不能多余两个；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findMinHeightTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[][] edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            ret.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List[] list = <span class=\"keyword\">new</span> List[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) list[i] = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] edge : edges) &#123;</span><br><span class=\"line\">            list[edge[<span class=\"number\">0</span>]].add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            list[edge[<span class=\"number\">1</span>]].add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Integer&gt; leaf = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list[i].size() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                leaf.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            n -= leaf.size();</span><br><span class=\"line\">            List&lt;Integer&gt; newLeaf = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Integer i : leaf) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>)list[i].iterator().next();</span><br><span class=\"line\">                list[j].remove(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (list[j].size() == <span class=\"number\">1</span>) newLeaf.add(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            leaf = newLeaf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leaf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作为拓扑排序的思路，剥洋葱方法值得记忆。</p>\n"}