{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/17/Peeking-iterator.json","date":1458244120000,"path":{"year":2016,"month":3,"day":17,"name":"Peeking-iterator"},"title":"Peeking iterator","permalink":"http://www.smartyi8979.com/2016/03/17/Peeking-iterator/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation – it essentially peek() at the element that will be returned <strong><em>by the next call to next().</em></strong><br><a id=\"more\"></a><br>Here is an example. Assume that the iterator is initialized to the beginning of the list: <code>[1, 2, 3]</code>.</p>\n<p>Call <code>next()</code> gets you 1, the first element in the list.</p>\n<p>Now you call <code>peek()</code> and it returns 2, the next element. Calling <code>next()</code> after that <strong>still</strong> return 2.</p>\n<p>You call <code>next()</code> the final time and it returns 3, the last element. Calling <code>hasNext()</code> after that should return false.</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>题目已经给出一个迭代器的接口是可以提供next和next()方法的，那么要求我们设计一个peekingIterator来实现每次调用next()方法都会返回下一个元素的值，且peek方法返回当之前next方法返回值的下一个值。</p>\n<p>仔细分析这里的例子，我们发现只有在调用next方法时，返回元素才会往后移动，而调用peek方法会返回上一次next返回元素的下一个元素。而且通过提示(好吧，我又无耻的看提示了)我们可以将下一个元素先cache进来，当我们需要是就返回。<br>好，那么现在任务很清晰了：</p>\n<ul>\n<li>next()方法返回下一个元素值；</li>\n<li>peek()方法返回上个next()方法返回值的下一个值；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeekingIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Iterator&lt;Integer&gt; iterator;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer nextInteger = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeekingIterator</span><span class=\"params\">(Iterator&lt;Integer&gt; iterator)</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// initialize any member here.</span></span><br><span class=\"line\">\t    <span class=\"keyword\">this</span>.iterator = iterator;</span><br><span class=\"line\">\t    <span class=\"comment\">//初始化的时候就将下一个元素cache进来。</span></span><br><span class=\"line\">\t    next();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns the next element in the iteration without advancing the iterator.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextInteger;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// hasNext() and next() should behave the same as in the Iterator interface.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Override them if needed.</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"comment\">//只有调用next()才会advance iterator。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    Integer temp = nextInteger;</span><br><span class=\"line\">\t    nextInteger = iterator.hasNext()?iterator.next():<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> nextInteger != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}