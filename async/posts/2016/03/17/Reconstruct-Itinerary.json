{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/17/Reconstruct-Itinerary.json","date":1458265220000,"path":{"year":2016,"month":3,"day":17,"name":"Reconstruct-Itinerary"},"title":"Reconstruct Itinerary","permalink":"http://www.smartyi8979.com/2016/03/17/Reconstruct-Itinerary/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with <code>JFK</code>.<br><a id=\"more\"></a></p>\n<p><strong>Note:</strong><br>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.<br>All airports are represented by three capital letters (IATA code).<br>You may assume all tickets form at least one valid itinerary.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">tickets = [[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</span><br><span class=\"line\">Return [&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;].</span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</span><br><span class=\"line\">Return [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;].</span><br><span class=\"line\">Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;]. But it is larger in lexical order.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>给出一堆机票，找出所有可能航线中字典序最小的航线。值得注意的是出发的机场必须是<code>JFK</code>机场。</p>\n<p>首先给机票组排序，然后就是用深搜和backtracking。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findItinerary</span><span class=\"params\">(String[][] tickets)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tickets == <span class=\"keyword\">null</span> || tickets.length == <span class=\"number\">0</span> || tickets[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        Arrays.sort(tickets, <span class=\"keyword\">new</span> Comparator&lt;String[]&gt;()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String[] arr1, String[] arr2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr1[<span class=\"number\">0</span>].equals(arr2[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> arr1[<span class=\"number\">1</span>].compareTo(arr2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> arr1[<span class=\"number\">0</span>].compareTo(arr2[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Map&lt;String, List&lt;String&gt;&gt; graph = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        buildGraph(tickets, graph);</span><br><span class=\"line\">        search(graph, <span class=\"string\">\"JFK\"</span>, ret, tickets.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildGraph</span><span class=\"params\">(String[][] tickets, Map&lt;String, List&lt;String&gt;&gt; graph)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tickets.length; i++) &#123;</span><br><span class=\"line\">            String key = tickets[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!graph.containsKey(key)) &#123;</span><br><span class=\"line\">                graph.put(key, <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            graph.get(key).add(tickets[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(Map&lt;String, List&lt;String&gt;&gt; graph, String start, List&lt;String&gt; ret, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ret.add(start);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret.size() &gt;= n) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!graph.containsKey(start) || graph.get(start).isEmpty()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;String&gt; cur = graph.get(start);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cur.size(); i++) &#123;</span><br><span class=\"line\">            String next = cur.get(i);</span><br><span class=\"line\">            graph.get(start).remove(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (search(graph, next, ret, n)) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            ret.remove(ret.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            graph.get(start).add(i, next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路还是很清晰的，首先利用邻接表来构建图，又因为乘客必须从”JFK”机场出发，因此以”JFK”作为搜索起点，利用深搜的方法，就能够得出答案。值得注意的是由于结果必须是lexi order最小的，因此需要排序。其次就是合理的答案应该是最中结果的大小必须是数组大小加1，这个可以通过分析简单得到，这也是backtracking返回的条件。<br>还有一点，我在这里犯迷糊了好久，就是ArrayList的set方法和add方法。一个是重置，一个是添加。重置的话当前链表必须有此下标，而添加的话可以添加的下标是当前下标加1.</p>\n"}