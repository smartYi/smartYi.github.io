{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":66},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":67}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":69}],"url":"/async/posts/2016/03/17/Longest-Increasing-Path-in-a-Matrix.json","date":1458263611000,"path":{"year":2016,"month":3,"day":17,"name":"Longest-Increasing-Path-in-a-Matrix"},"title":"Longest Increasing Path in a Matrix","permalink":"http://www.smartyi8979.com/2016/03/17/Longest-Increasing-Path-in-a-Matrix/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given an integer matrix, find the length of the longest increasing path.<br><a id=\"more\"></a><br>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\n<blockquote>\n<p>Example 1:</p>\n<p>nums = [<br> [<strong>9</strong>,9,4],<br> [<strong>6</strong>,6,8],<br> [<strong>2,1</strong>,1]<br>]<br>Return 4<br>The longest increasing path is [1, 2, 6, 9].</p>\n<p>Example 2:<br>nums = [<br> [<strong>3,4,5</strong>],<br> [3,2,<strong>6</strong>],<br> [2,2,1]<br>]<br>Return 4<br>The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</p>\n</blockquote>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>典型深搜，能够优化的地方在于需要用memo技巧来标记已经走过的路径的最长路径值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestIncreasingPath</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] memo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[matrix.length][matrix[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                ret = Math.max(ret, helper(matrix, memo, i, j));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span>[][] memo, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果已经搜索过当前路径，直接返回结果。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memo[x][y] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> memo[x][y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= matrix.length || y &lt; <span class=\"number\">0</span> || y &gt;= matrix[<span class=\"number\">0</span>].length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, up = <span class=\"number\">0</span>, down = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; matrix[x][y] &gt; matrix[x-<span class=\"number\">1</span>][y])</span><br><span class=\"line\">            left = helper(matrix, memo, x - <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x + <span class=\"number\">1</span> &lt; matrix.length &amp;&amp; matrix[x][y] &gt; matrix[x+<span class=\"number\">1</span>][y])</span><br><span class=\"line\">            right = helper(matrix, memo, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; matrix[x][y] &gt; matrix[x][y - <span class=\"number\">1</span>])</span><br><span class=\"line\">            up = helper(matrix, memo, x, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y + <span class=\"number\">1</span> &lt; matrix[<span class=\"number\">0</span>].length &amp;&amp; matrix[x][y] &gt; matrix[x][y+<span class=\"number\">1</span>])</span><br><span class=\"line\">            down = helper(matrix, memo, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">        ret += Math.max(Math.max(left, right), Math.max(up, down));</span><br><span class=\"line\">        memo[x][y] = ret;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}