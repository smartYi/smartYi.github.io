{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":81},{"name":"Backtracking","permalink":"http://www.smartyi8979.com/tags/Backtracking/","url":"/async/tags/Backtracking.json","count":3}],"categories":[{"name":"算法","permalink":"http://www.smartyi8979.com/categories/算法/","url":"/async/categories/算法.json","count":3}],"url":"/async/posts/2016/03/24/Permutations.json","date":1458799396000,"path":{"year":2016,"month":3,"day":24,"name":"Permutations"},"title":"Permutations I&II","permalink":"http://www.smartyi8979.com/2016/03/24/Permutations/","content":"<h4 id=\"Problem1\"><a href=\"#Problem1\" class=\"headerlink\" title=\"Problem1:\"></a>Problem1:</h4><p>Given a collection of distinct numbers, return all possible permutations.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">[1,2,3] have the following permutations:</span><br><span class=\"line\">[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>和combination，subset并为回溯法的三大经典题目。<br>给定一个数组，取得数组的所有permutation。因为是permutation，所以数组中的每个元素都的用到而且只用到一次。了解到这点，其余的就是递归和保留现场了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;Integer&gt; current = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        helper(list, current, nums);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; current, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current.size() == nums.length) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> ArrayList(current));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current.contains(nums[i])) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            current.add(nums[i]);</span><br><span class=\"line\">            helper(list, current, nums);  </span><br><span class=\"line\">            current.remove(current.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，在上面判定是否已经用了某元素的时候，我用的contains方法，事实上这是效率很低的，于是我就利用了map来标记是否使用，可是最后的运行时间相差不大，甚至更差，我觉得应该是测试数据过小的原因。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        List&lt;Integer&gt; current = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        Map&lt;Integer, Boolean&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        helper(list, current, nums, map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; current, <span class=\"keyword\">int</span>[] nums, Map&lt;Integer, Boolean&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current.size() == nums.length) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> ArrayList(current));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//if (current.contains(nums[i])) continue;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.get(i) == <span class=\"keyword\">null</span> || !map.get(i)) &#123;</span><br><span class=\"line\">                current.add(nums[i]);</span><br><span class=\"line\">                map.put(i, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                helper(list, current, nums, map);  </span><br><span class=\"line\">                current.remove(current.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">                map.put(i, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Problem-2\"><a href=\"#Problem-2\" class=\"headerlink\" title=\"Problem 2:\"></a>Problem 2:</h4><p>第二题和第一题的区别在于给定的数组可能包含duplicates，那么我们就需要去重。去重的方法和之前说的一样，利用<code>(i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])</code>进行去重，但是除此之外还得进行另外一层判定，就是在上面判定的基础上得判定<code>i-1</code>位置上的元素是否已经添加，注意是该位置的元素是否添加而不是改元素是否添加。如果该位置元素未添加，且<code>(i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])</code>，就证明这是一组新的求解，那么就需要跳过。</p>\n<p>同样的我用map来进行加速，但是效率还是不是很明显。哎！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    Map&lt;Integer, Boolean&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        helper(nums,nums.length,<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(),map);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k, ArrayList&lt;Integer&gt; cur, Map&lt;Integer, Boolean&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(cur));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i - <span class=\"number\">1</span>] &amp;&amp; </span><br><span class=\"line\">                (map.get(i - <span class=\"number\">1</span>) == <span class=\"keyword\">null</span> || !map.get(i - <span class=\"number\">1</span>))) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.get(i) == <span class=\"keyword\">null</span> || !map.get(i)) &#123;</span><br><span class=\"line\">                cur.add(nums[i]);</span><br><span class=\"line\">                map.put(i, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                helper(nums, k - <span class=\"number\">1</span>, cur, map);</span><br><span class=\"line\">                cur.remove(cur.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">                map.put(i, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}