{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":75},{"name":"Backtracking","permalink":"http://www.smartyi8979.com/tags/Backtracking/","url":"/async/tags/Backtracking.json","count":3}],"categories":[{"name":"算法","permalink":"http://www.smartyi8979.com/categories/算法/","url":"/async/categories/算法.json","count":3}],"url":"/async/posts/2016/03/24/Subsets.json","date":1458797978000,"path":{"year":2016,"month":3,"day":24,"name":"Subsets"},"title":"Subsets I&II","permalink":"http://www.smartyi8979.com/2016/03/24/Subsets/","content":"<h4 id=\"Problem1\"><a href=\"#Problem1\" class=\"headerlink\" title=\"Problem1:\"></a>Problem1:</h4><p>Given a set of distinct integers, nums, return all possible subsets.<br><a id=\"more\"></a></p>\n<p>Note:</p>\n<ul>\n<li>Elements in a subset must be in non-descending order.</li>\n<li>The solution set must not contain duplicate subsets.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">If nums = [1,2,3], a solution is:</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [1],</span><br><span class=\"line\">  [2],</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  []</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>这道题目的回溯法比之前讲的combinations系列还要直观，基本上没有返回条件，每次递归一次便往最终结果添加一个数据。<br>这道题目的另外一个巧妙点在于bit manipulation。在数学上我们知道对于一个含有\\(n\\)个元素的集合，它的子集合的个数是\\(2^n\\)。而这个恰好我们可以利用int的二进制形式来进行表示，某个数的二进制的某一位如果是1，代表当前元素取到，否则就是没取到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.Using backtracking.</span></span><br><span class=\"line\">        <span class=\"comment\">//2.Using bitmanipulation</span></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"comment\">//List&lt;Integer&gt; cur = new LinkedList&lt;Integer&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">//helper(nums, list, cur, 0);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> list = bitWay(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; cur, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里需要深拷贝，否则会造成数据之间的紊乱。</span></span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> LinkedList(cur));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i&lt;nums.length;i++) &#123;</span><br><span class=\"line\">            cur.add(nums[i]);</span><br><span class=\"line\">            helper(nums, list, cur, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            cur.remove(cur.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; bitWay(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>)Math.pow(<span class=\"number\">2</span>,nums.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;nums.length;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((i &gt;&gt; j) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    cur.add(nums[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.add(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>掌握bit方法解这道题也是很重要的。</p>\n<h4 id=\"Problem-2\"><a href=\"#Problem-2\" class=\"headerlink\" title=\"Problem 2:\"></a>Problem 2:</h4><p>第二题和第一题的区别在于第二题的数组可能包含duplicates，但是我们的subsets必须unique。</p>\n<p>基本思路和上面是一样的，重点是如何保证不包含重复的subset。最原始的想法就是调用list的contains方法，就能够得到结果，但是这很没有效率，因为list的contains方法的实现是遍历的。还记得我们在combinations中的解法吗？我们只加了一行代码，便使得subset的unique，而且不失效率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">        helper(list, cur, nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; cur, <span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//if (!list.contains(cur)) &#123;</span></span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> LinkedList(cur));</span><br><span class=\"line\">       <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=start; i&lt; nums.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//就是这行代码，省去了上述注释掉的代码。大大提高了效率。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; start &amp;&amp; (nums[i] == nums[i - <span class=\"number\">1</span>])) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            cur.add(nums[i]);</span><br><span class=\"line\">            helper(list, cur, nums, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            cur.remove(cur.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基本上这种题目都会检查重复计算。</p>\n"}