{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":74},{"name":"Backtracking","permalink":"http://www.smartyi8979.com/tags/Backtracking/","url":"/async/tags/Backtracking.json","count":3}],"categories":[{"name":"算法","permalink":"http://www.smartyi8979.com/categories/算法/","url":"/async/categories/算法.json","count":3}],"url":"/async/posts/2016/03/24/Combination-Sum.json","date":1458795433000,"path":{"year":2016,"month":3,"day":24,"name":"Combination-Sum"},"title":"Combination Sum I&II&III","permalink":"http://www.smartyi8979.com/2016/03/24/Combination-Sum/","content":"<h4 id=\"Problem1\"><a href=\"#Problem1\" class=\"headerlink\" title=\"Problem1:\"></a>Problem1:</h4><p>Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.<br><a id=\"more\"></a></p>\n<p>The same repeated number may be chosen from C unlimited number of times.</p>\n<p>Note:</p>\n<ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, given candidate set 2,3,6,7 and target 7, </span><br><span class=\"line\">A solution set is: </span><br><span class=\"line\">[7] </span><br><span class=\"line\">[2, 2, 3]</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>这三个题目应该算是回溯法的入门了。以这三个题目为起点，将回溯法好好复习一遍。<br>回溯法当然也是递归思想的一种实现，其重点在于保持现场，也就是递归结束之后，能够将状态恢复到递归调用之前的状态。这里所说的状态，因题而异。在这个题目，状态就是List里面包含的整数。</p>\n<ul>\n<li>因为要保证结果是增序，那么首先得排序，直接调用Arrays的内置函数即可；</li>\n<li>然后保持一个List用来存储当前已经利用的整数，然后递归调用方法；</li>\n<li>当递归调用结束后，删除最后一个添加到List中的元素，恢复现场；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (candidates == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">        helper (candidates, list, cur, target, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; cur, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//递归调用的终止条件。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> LinkedList(cur));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=start;i&lt;candidates.length;i++) &#123;</span><br><span class=\"line\">            cur.add(candidates[i]);</span><br><span class=\"line\">            <span class=\"comment\">//因为元素可以反复使用，因此下一次的start就从当前元素开始。</span></span><br><span class=\"line\">            helper(candidates, list, cur, target - candidates[i] , i);</span><br><span class=\"line\">            cur.remove(cur.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Problem2\"><a href=\"#Problem2\" class=\"headerlink\" title=\"Problem2:\"></a>Problem2:</h4><p>第二题和第一题唯一的区别在于这里的元素不能重复使用，重复使用的意思是每个元素只能使用一次，而不是说combination中不能有duplicates。<br>分析和上面一样，唯一的区别就是递归那里加了个1.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        helper(candidates, list, cur, target, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; cur, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = candidates.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> ArrayList(cur));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在这里添加一行代码，可以很简单的去处重复的combination。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;start &amp;&amp; candidates[i] == candidates[i-<span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            cur.add(candidates[i]);</span><br><span class=\"line\">            helper(candidates, list, cur, target - candidates[i], i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            cur.remove(cur.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Problem-3\"><a href=\"#Problem-3\" class=\"headerlink\" title=\"Problem 3:\"></a>Problem 3:</h4><p>第三个题目是比较泛化的，给定两个参数，一个k，一个n，求出所有的combination size为k的，且元素之和为n。可供使用的元素是1到9. 每个元素只能用一次。</p>\n<p>分析和上述一样，只是每次传入的参数多了一个k，返回的判断条件多了一些限制条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum3(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\">        List&lt;Integer&gt; current = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">0</span> || n == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            list.add(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        helper(list, current, k, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; current, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.size() == k &amp;&amp; n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> ArrayList(current));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current.size() == k &amp;&amp; n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=index;i&lt;=<span class=\"number\">9</span>;i++) &#123;</span><br><span class=\"line\">            current.add(i);</span><br><span class=\"line\">            helper(list, current, k, n-i, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">            current.remove(current.size()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这三个题目加上subset应该属于最典型的backtracking题目了。代码都有统一的模式，而掌握这些模式并不是最重要的，而应该理解回溯法的精髓在于保护现场。</p>\n"}