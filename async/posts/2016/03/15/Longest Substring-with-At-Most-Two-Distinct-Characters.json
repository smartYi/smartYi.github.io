{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":6},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":5},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":5}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":8}],"url":"/async/posts/2016/03/15/Longest Substring-with-At-Most-Two-Distinct-Characters.json","date":1458072165000,"path":{"year":2016,"month":3,"day":15,"name":"Longest Substring-with-At-Most-Two-Distinct-Characters"},"title":"Longest Substring with At Most Two Distinct Characters","permalink":"http://www.smartyi8979.com/2016/03/15/Longest Substring-with-At-Most-Two-Distinct-Characters/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a string, find the length of the longest substring T that contains at most 2 distinct characters.<br>For example, Given <strong>s = “eceba”</strong>,<br>T is <strong>“ece”</strong> which its length is 3.<br><a id=\"more\"></a></p>\n<h4 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h4><p>给定一个字符串，要求求出一个满足条件的最长字串长度，条件是：该字串只能包含两个不同字符。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>由于规定字串只能包含两个不同字符，但每个字符的数量可以不限。<br>这个问题可以通过滑动窗口的思想来进行解答。假设我们现在有一个滑动窗口，在这个窗口里面的字符串只包含两个独特字符，那么当我们窗口扩展到下一个字符时，出现了第三个不同的字符，那么应该如何处理这个窗口，使得新的窗口中还是包含两个不同的字符，而且最好保证长度是肯呢过字符子串的最大值。<br>那么我们可以用一个map来进行储存每个字符现的位置。这样每次遇到已经存储的字符时，都会更新当前字符所在的位置，那么也就是说其实map里面存放的是每个字符最后出现的位置。那么有了这个之后，我们就好办了。我们只要把两个字符中出线位置靠左边的那个字符之前的所有字符删除掉，就一定能保证之后的字符串里面不包含该字符，这样当新的字符进来时，子串中还是只有两个不同字符。<br>举个例子：<br><code>abac</code>,这样，当我们开始放<code>c</code>时，由于之前的子串中已经包含两个不同字符<code>a,b</code>，那么我们就需要删除一部分子串。我们可以把<code>a</code>之前的全都删掉，那么现在就只剩下接下来添加的<code>c</code>，显然不是最好的选择。更好的选择是把<code>b</code>之前的字符删掉，这时候保留的是<code>ac</code>，这才是我们更加想要的，虽然这个字符串的结果应该是3<code>aba</code>。 </p>\n<p>好了，分析完毕，来看代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int lengthOfLongestSubstringTwoDistinct(String s) &#123;</span><br><span class=\"line\">        if (s == null || s.length() == 0) return 0;</span><br><span class=\"line\">        int length = s.length();</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        int ret = 0;</span><br><span class=\"line\">        int start = 0;</span><br><span class=\"line\">        int i;</span><br><span class=\"line\">        for (i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">            char cur = s.charAt(i);</span><br><span class=\"line\">            if (map.size() == 2 &amp;&amp; !map.containsKey(cur)) &#123;</span><br><span class=\"line\">                ret = Math.max(ret, (i - start));</span><br><span class=\"line\">                char key = &apos;\\0&apos;;</span><br><span class=\"line\">                int index = Integer.MAX_VALUE;</span><br><span class=\"line\">                Iterator iterator = map.entrySet().iterator();</span><br><span class=\"line\">                while (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    Map.Entry entry = (Map.Entry) iterator.next();</span><br><span class=\"line\">                    int curIndex = (int)entry.getValue();</span><br><span class=\"line\">                    char curKey = (char)entry.getKey();</span><br><span class=\"line\">                    if (curIndex &lt; index) &#123;</span><br><span class=\"line\">                        index = curIndex;</span><br><span class=\"line\">                        key = curKey;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                start = index + 1;</span><br><span class=\"line\">                map.remove(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(cur, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Math.max(ret, i - start);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么接下来有一个follow-up，就是如果允许子串中最多不出现k个不同字符呢？</p>\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>对于这个题目也是一样的，我们还是用map来存储字符信息，只是这次存放的不是位置了，而是在当前窗口下某个字符出现的次数。<br>因为在上面的分析中，我们看到，在删除最左边出现的字符时，我用的是一个叫做start变量，我直接把它往后移动了。那么在这里我们是一个一个删除，直至map的大小为k。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int lengthOfLongestSubstringKDistinct(String s, int k) &#123;  </span><br><span class=\"line\">    int start = 0;  //用一个变量标记当前即将删除的开始位置。</span><br><span class=\"line\">    int maxLen = 0;   </span><br><span class=\"line\">    Map&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();  </span><br><span class=\"line\">    int i;  </span><br><span class=\"line\">    for (i = 0; i &lt; s.length(); ++i) &#123;  </span><br><span class=\"line\">        char c = s.charAt(i);  </span><br><span class=\"line\">        if (map.containsKey(c)) &#123;  </span><br><span class=\"line\">            map.put(c, map.get(c) + 1);  </span><br><span class=\"line\">        &#125; else &#123;  </span><br><span class=\"line\">            map.put(c, 1);  </span><br><span class=\"line\">            while (map.size() &gt; k) &#123;  </span><br><span class=\"line\">            ///如果size &gt; k， 进行删除。</span><br><span class=\"line\">                char startChar = s.charAt(start++);  </span><br><span class=\"line\">                int count = map.get(startChar);  </span><br><span class=\"line\">                if (count &gt; 1) &#123;  </span><br><span class=\"line\">                    map.put(startChar, count - 1);  </span><br><span class=\"line\">                &#125; else &#123;  </span><br><span class=\"line\">                    map.remove(startChar);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        maxLen = Math.max(maxLen, i - start + 1);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return maxLen;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}