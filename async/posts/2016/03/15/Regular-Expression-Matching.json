{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":71},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":72}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":74}],"url":"/async/posts/2016/03/15/Regular-Expression-Matching.json","date":1458060778000,"path":{"year":2016,"month":3,"day":15,"name":"Regular-Expression-Matching"},"title":"Regular Expression Matching","permalink":"http://www.smartyi8979.com/2016/03/15/Regular-Expression-Matching/","content":"<p><a href=\"https://leetcode.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"external\">Leetcode链接/Regular Expression Matching</a></p>\n<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Implement regular expression matching with support for ‘.’ and ‘*’.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;.&apos; Matches any single character.  </span><br><span class=\"line\">&apos;*&apos; Matches zero or more of the preceding element.  </span><br><span class=\"line\"></span><br><span class=\"line\">The matching should cover the entire input string (not partial).  </span><br><span class=\"line\">The function prototype should be:  </span><br><span class=\"line\">bool isMatch(const char *s, const char *p)  </span><br><span class=\"line\"></span><br><span class=\"line\">Some examples:  </span><br><span class=\"line\">isMatch(&quot;aa&quot;,&quot;a&quot;) → false </span><br><span class=\"line\">isMatch(&quot;aa&quot;,&quot;aa&quot;) → true  </span><br><span class=\"line\">isMatch(&quot;aaa&quot;,&quot;aa&quot;) → false  </span><br><span class=\"line\">isMatch(&quot;aa&quot;, &quot;a*&quot;) → true  </span><br><span class=\"line\">isMatch(&quot;aa&quot;, &quot;.*&quot;) → true  </span><br><span class=\"line\">isMatch(&quot;ab&quot;, &quot;.*&quot;) → true  </span><br><span class=\"line\">isMatch(&quot;aab&quot;, &quot;c*a*b&quot;) → true</span><br></pre></td></tr></table></figure>\n<p>Analysis:<br>真是够难的。难度在于如何分析<strong>*</strong>号。<br>假设regular expression字符串是p，匹配字符串是s；  </p>\n<ul>\n<li><p>首先分析题意:<br><strong>“.”</strong>号代表一个任意的字符，<strong>*</strong>代表零个或者多个前驱字符，那么重点就在如何分情况讨论零个或者多个前驱字符情况；  </p>\n</li>\n<li><p>如果当前字符的下一个字符是<strong>*</strong>字符，那么存在以下可能性；</p>\n<ul>\n<li>零个字符，那么这种情况意味着<strong>x*</strong>这两个字符没起到任何作用，其效果等价于匹配<strong>s</strong>和<strong>p.substring(2)</strong>;</li>\n<li>假设代表多个前驱字符，那么我们需要每次对当前的字符和匹配字符进行比较，比较的结果两种：<ul>\n<li>两者字符相同，包含字符相同和匹配字符是<strong>“.”</strong>的情况，那么<strong>s = s.substring(1)</strong>; p不变，因为可能是匹配多个前驱字符；</li>\n<li>两者字符不同，直接返回false；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>其伪码形式如下：</p>\n<p>  <code>if (s[i] == p[i] || p[i] == &#39;.&#39;); s = s.substring(1);</code><br>  <code>else return false;</code>  </p>\n</li>\n<li><p>如果当前字符的下一个字符不是<strong>*</strong>字符，那么p往后移动就好；</p>\n</li>\n</ul>\n<p>AC代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.length(); s = s.substring(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t <span class=\"keyword\">char</span> cur = p.charAt(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &gt;= p.length() || p.charAt(i + <span class=\"number\">1</span>) != <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t&#125;  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isMatch(s, p.substring(<span class=\"number\">2</span>)))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s.isEmpty() || (s.charAt(<span class=\"number\">0</span>) != cur &amp;&amp; cur != <span class=\"string\">'.'</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}