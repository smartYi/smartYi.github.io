{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":53},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":51},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":51}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":55}],"url":"/async/posts/2016/03/15/Read-N-Characters-Given-Read4-1&2.json","date":1458069279000,"path":{"year":2016,"month":3,"day":15,"name":"Read-N-Characters-Given-Read4-1&2"},"title":"Read N Characters Given Read4 1&2","permalink":"http://www.smartyi8979.com/2016/03/15/Read-N-Characters-Given-Read4-1&2/","content":"<p><a href=\"https://leetcode.com/problems/read-n-characters-given-read4/\" target=\"_blank\" rel=\"external\">Leetcode链接/Read N Characters Given Read4</a><br><a href=\"https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times/\" target=\"_blank\" rel=\"external\">Leetcode链接/Read N Characters Given Read4 II</a><br><a id=\"more\"></a></p>\n<h4 id=\"Problem-1-Read-N-Characters-Given-Read4\"><a href=\"#Problem-1-Read-N-Characters-Given-Read4\" class=\"headerlink\" title=\"Problem 1: Read N Characters Given Read4\"></a>Problem 1: Read N Characters Given Read4</h4><p>The API: <strong>int read4(char *buf)</strong> reads 4 characters at a time from a file.</p>\n<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>\n<p>By using the read4 API, implement the function <strong>int read(char *buf, int n)</strong> that reads n characters from the file.</p>\n<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>第一题很简单，就是给你一个已经写好的API方法，<strong>int read4(char *buf)</strong>，每次读取四个字符，然后返回值是真实读取的字符数量，也就是说可能读取的数量不足四个。然后叫你利用这个方法实现一个新的方法，<strong>int read(char *buf, int n)</strong>。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>利用两个变量分别用来标记目标数组和读取数组的大小，然后一个一个放进目标数组就好了。</p>\n<p>AC代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* The read4 API is defined in the parent class Reader4.</span><br><span class=\"line\">      int read4(char[] buf); */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> <span class=\"keyword\">extends</span> <span class=\"title\">Reader4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> buf Destination buffer</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> n   Maximum number of characters to read</span><br><span class=\"line\">     * <span class=\"doctag\">@return</span>    The number of characters read</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">char</span>[] buf, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ret &lt; n &amp;&amp; (num = read4(temp)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num &amp;&amp; ret &lt; n; i++) &#123;</span><br><span class=\"line\">                buf[ret++] = temp[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Problem-2-Read-N-Characters-Given-Read4-II-Call-many-times\"><a href=\"#Problem-2-Read-N-Characters-Given-Read4-II-Call-many-times\" class=\"headerlink\" title=\"Problem 2: Read N Characters Given Read4 II: Call many times\"></a>Problem 2: Read N Characters Given Read4 II: Call many times</h4><p>The API: <strong>int read4(char *buf)</strong> reads 4 characters at a time from a file.</p>\n<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>\n<p>By using the read4 API, implement the function <strong>int read(char *buf, int n)</strong> that reads n characters from the file.</p>\n<h4 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>就是给你一个已经写好的API方法，<strong>int read4(char *buf)</strong>，每次读取四个字符，然后返回值是真实读取的字符数量，也就是说可能读取的数量不足四个。然后叫你利用这个方法实现一个新的方法，<strong>int read(char *buf, int n)</strong>。<br>这道题目和上一道不同地方在于，可能会call很多次，而且每次call都会从上一次截至之后的字符开始读。为了测一下喝第一道题目的不同，直接把第一道题目的代码给粘过去，然后测试一下。发现不通过（这是理所当然的好嘛-_-#）。但我们可通过错误来分析一下到底有什么不同。</p>\n<h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>还是按照第一题那样，利用两个变量分别用来标记目标数组和读取数组的大小，然后一个一个放进目标数组就好了。得到错误如下：<br><img src=\"/img/1.png\" alt=\"img\"><br>可以从错误看到，当两次调用read方法时，第一次只读取了一个字符，按理说第二次读取时字符串还剩一个字符，但是第二次读取时什么也没读到。然后我们又想起给定的API方法一次性至多可以读四个字符，那么就是说在第一次读取过程中，读出了两个字符但是却只把一个字符放进目标数组，这样就造成第二次读取时由于之前的数据没有保存，而造成丢失。<br>那么真正的问题就来了，<strong>如何在每次读取出的字符没使用完的情况下，在后面的读取中继续使用之前的读取结果呢？</strong><br>我们可以采用全局变量来解决这个问题。<br>我现在有三个全局变量，一个是当前读取结果使用到的下表数index，一个是当前读取数组读取的字符数量num，还有一个当然就是数组本身了。那么现在就有以下情况：  </p>\n<ul>\n<li>当index为0的时候，代表当前读取数组已经使用完毕（当然初始化为0意味着还未进行读取），那么此时我们就需要进行下一轮的读取；</li>\n<li>如果index不为0，意味着之前的读取数组还没使用完毕，这一次读取可以接着使用之前的读取结果；</li>\n<li>如果index和num相同，意味着当前的读取结果已经存放完毕，我们需要把index设置为0，这样在一次读取时重新读取字符；</li>\n<li>当然还会有一种base case，那就是num为0，意味着没有多余的字符可读了，跳出循环即可；</li>\n</ul>\n<p>AC代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* The read4 API is defined in the parent class Reader4.</span><br><span class=\"line\">      int read4(char[] buf); */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> <span class=\"keyword\">extends</span> <span class=\"title\">Reader4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> buf Destination buffer</span><br><span class=\"line\">     * <span class=\"doctag\">@param</span> n   Maximum number of characters to read</span><br><span class=\"line\">     * <span class=\"doctag\">@return</span>    The number of characters read</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">char</span>[] buf, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                num = read4(temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; n &amp;&amp; index &lt; num) &#123;</span><br><span class=\"line\">                buf[i++] = temp[index++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == num) index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二题还是蛮有技巧性的，也考虑到全局变量的使用情况。</p>\n"}