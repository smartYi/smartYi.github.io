{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/30/Count-Complete-Tree-Nodes.json","date":1459268654000,"path":{"year":2016,"month":3,"day":30,"name":"Count-Complete-Tree-Nodes"},"title":"Count Complete Tree Nodes","permalink":"http://www.smartyi8979.com/2016/03/30/Count-Complete-Tree-Nodes/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a complete binary tree, count the number of nodes.<br><a id=\"more\"></a></p>\n<p>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>完全二叉树的定义上面已经给出。按照常规，树的题目首先想到就是的递归解法。本题的递归解法也很简单，分别计算左右子树的节点个数，相加加1即可。那么又如何计算子树的节点数呢？因为是完全二叉树，如果是完美二叉树的话，那么节点数是\\((2^n)-1\\)，n是树的高度。很显然，我们可以利用这一点解题。那么什么树是完美二叉树呢？就是最左路径长度和最右路径长度相同。当然定义肯定不是这样，我这里抽离出我需要的特性来进行说明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        TreeNode left = root;</span><br><span class=\"line\">        TreeNode right = root;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> leftHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rightHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            left = left.left;</span><br><span class=\"line\">            leftHeight++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            right = right.right;</span><br><span class=\"line\">            rightHeight++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rightHeight == leftHeight) <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)Math.pow(<span class=\"number\">2</span>, rightHeight) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span> + countNodes(root.left) + countNodes(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路很清晰，也很简单，但是通过不了。写成c版本跑一次，却通过了。哎，果然java还是要慢很多啊。那么没办法，只能想其他优化的解法，看本题的tag，竟然是二分查找。完全没思绪好嘛？看了讨论区的解释，还是没能理解算法含义，可能是语言不过关。不管怎样，又去网上看了别人写的<a href=\"http://bookshadow.com/weblog/2015/06/06/leetcode-count-complete-tree-nodes/\" target=\"_blank\" rel=\"external\">博客</a>，才豁然开朗。牛逼哄哄的这里利用了类似霍夫曼编码来计算节点个数。我们定义：</p>\n<ul>\n<li>对于任意一个节点，如果访问它的左节点，我们为二进制添上0；</li>\n<li>对于任意一个节点，如果访问它的左节点，我们为二进制添上1；</li>\n</ul>\n<p>那么现在我们就为最后一层的所有节点打上了唯一的标记，我们只要统计最后一层的节点个数再加上之前的所有节点即可。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lv0        1 </span><br><span class=\"line\">         /    \\</span><br><span class=\"line\">Lv1     2      3</span><br><span class=\"line\">       /  \\   /  \\</span><br><span class=\"line\">Lv2   4   5  6   -</span><br><span class=\"line\"></span><br><span class=\"line\">No.   00  01 10</span><br></pre></td></tr></table></figure>\n<p>AC:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        TreeNode node = root;</span><br><span class=\"line\">        <span class=\"comment\">//先求出树的高度</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            node = node.left;</span><br><span class=\"line\">            depth++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果树高0，直接返回0即可。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//接下来是树的最后一层可能的节点的编号，从0开始。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = (<span class=\"number\">1</span> &lt;&lt; (depth - <span class=\"number\">1</span>)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//为什么这里是等号，因为我们需要找到最后一个null节点是对应的right编号。</span></span><br><span class=\"line\">        <span class=\"comment\">//如果不是小于等于而只是单纯的小于的话，存在left或者right为null的情况。</span></span><br><span class=\"line\">        <span class=\"comment\">//对于二分查找的分析，在二分查找会有详细说明。</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//找出当前mid对应的节点。为什么是depth－1，因为最后一层有pow(2, depth-1)个节点。</span></span><br><span class=\"line\">            TreeNode cur = getNode(root, mid, depth - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right + (<span class=\"number\">1</span> &lt;&lt; (depth - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">getNode</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> depth)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (depth != <span class=\"number\">0</span> &amp;&amp; root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为什么实现减1，因为要把当前节点分为左半部分和右半部分。</span></span><br><span class=\"line\">            depth--;</span><br><span class=\"line\">            <span class=\"comment\">//如果mid与(1 &lt;&lt; depth))为0，证明mid不在右半部分(为什么，自己想)，继续往左找；否则往右找。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mid &amp; (<span class=\"number\">1</span> &lt;&lt; depth)) == <span class=\"number\">0</span>) root = root.left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于一些方法以及判定条件的分析，在代码的注释中。</p>\n"}