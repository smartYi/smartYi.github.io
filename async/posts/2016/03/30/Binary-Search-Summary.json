{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":84}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/30/Binary-Search-Summary.json","date":1459394840000,"path":{"year":2016,"month":3,"day":30,"name":"Binary-Search-Summary"},"title":"Binary Search Summary","permalink":"http://www.smartyi8979.com/2016/03/30/Binary-Search-Summary/","content":"<p>本文转载于:<a href=\"http://www.tangjikai.com/algorithms/leetcode-binary-search\" target=\"_blank\" rel=\"external\">戳这里</a><br><a id=\"more\"></a></p>\n<h4 id=\"1-Basic-Algorithm-Search-in-Sorted-Array\"><a href=\"#1-Basic-Algorithm-Search-in-Sorted-Array\" class=\"headerlink\" title=\"1.Basic Algorithm: Search in Sorted Array\"></a>1.Basic Algorithm: Search in Sorted Array</h4><p>The basic of binary search is to find a target value in sorted array. </p>\n<p>For example:  </p>\n<ol>\n<li><strong>l &lt;= r</strong>: if target in the array, we will find and return it in the while loop; otherwise return -1 means target is not in array.</li>\n<li><strong>r = mid - 1</strong> and <strong>l = mid + 1</strong>: mid is not target, skip it.</li>\n</ol>\n<p>在上面的解释中，说明了两点。</p>\n<ol>\n<li>为什么是 <strong>l &lt;= r</strong>，而不是<strong>l &lt; r</strong>，这是二分查找很让人confuse的一点。这里给出了一个判断原则，那就是我们查找的目标要么一定在array中，要么不存在返回－1.那如果是<strong>l &lt; r</strong>，会存在什么漏判呢？那就是如果<strong>l == r</strong>时，对于<strong>l &lt; r</strong>已经不满足了，我们会跳出循环，返回l或者r，但是这是不合理的，因为我们还没有判定l上的位置是不是我们想要的，如果不是，那就出bug。相反的对于<strong>l &lt;= r</strong>来说会继续判定；</li>\n<li>这点就是折半缩小范围了；</li>\n</ol>\n<p><img src=\"http://www.tangjikai.com/uploads/2/7/7/3/27735981/1437082950.png?250\" alt=\"img\"></p>\n<p>这是基本二分查找的步骤。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def bsearch(array, l, r, target):</span><br><span class=\"line\">       while l &lt;= r:  </span><br><span class=\"line\">                mid = l + (r - l) / 2</span><br><span class=\"line\">                if array[mid] &gt; target:</span><br><span class=\"line\">                        r = mid - 1</span><br><span class=\"line\">                elif array[mid] &lt; target:</span><br><span class=\"line\">                        l = mid + 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                        return mid</span><br><span class=\"line\">        return -1</span><br></pre></td></tr></table></figure>\n"}