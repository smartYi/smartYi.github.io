{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":57},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":55},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":55}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":59}],"url":"/async/posts/2016/03/16/Peak-element.json","date":1458182531000,"path":{"year":2016,"month":3,"day":16,"name":"Peak-element"},"title":"Peak element","permalink":"http://www.smartyi8979.com/2016/03/16/Peak-element/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given an array, find one peak element index and return;<br><a id=\"more\"></a></p>\n<h4 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>题目要求的是返回数组中任意一个peak element就行了。<br>当然遍历是肯定可以的，但这样就丧失了这个题目的意义。那么我们就试试用二分查找。<br>Binary search算法作为十大改变世界的算法，具有重要的意义。稍后会专门来讲讲二分查找。<br>那么这个题目如何运用二分查找呢？<br>题目还给出了一个预设就是，数组外的元素是负无穷，也就是说总会存在一个peak element的。那么如何运用二分查找呢？<br>当初理解这个题目，我是用爬山的例子来进行解释的。</p>\n<ul>\n<li>还是选择中间元素，然后和它之后的元素进行比较；如果小于之后的元素，那么证明你现在排山还处在上升阶段，至少下一个山头比你这个山头要大，又因为最后肯定会是下山，所以后面的山头中肯定会存在peak element；</li>\n<li>反之亦然；如果当前元素大于后面元素，那么你本来是从山底爬上来的，现在你之后的山头比你低，那么肯定在你之前的山头肯定有peak element，当然这个山头还包括你在的山头；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findPeakElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; nums[mid + <span class=\"number\">1</span>]) left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}