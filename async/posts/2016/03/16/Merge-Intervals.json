{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":68},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":69}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":71}],"url":"/async/posts/2016/03/16/Merge-Intervals.json","date":1458157916000,"path":{"year":2016,"month":3,"day":16,"name":"Merge-Intervals"},"title":"Merge Intervals","permalink":"http://www.smartyi8979.com/2016/03/16/Merge-Intervals/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a set of intervals, merge them if any of them overlap each other.<br><a id=\"more\"></a></p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given [1,3],[2,6],[8,10],[15,18],    </span><br><span class=\"line\">return [1,6],[8,10],[15,18].</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>问题其实不难，将给出的intervals按照起始点进行排序，然后一步一步添加下去就好了。<br>但是我在做的时候还是出现了几个小问题：</p>\n<ul>\n<li>新的interval的起始点必须是两个合并intervals的最小的那个；</li>\n<li>但是结束点必须是合并intervals最大的那个；</li>\n</ul>\n<p>其实并不是什么难问题，只是在写的时候思维考虑不全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title\">merge</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Interval&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals == <span class=\"keyword\">null</span> || intervals.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval l1, Interval l2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> l1.start - l2.start;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ret.add(intervals.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">            Interval cur = intervals.get(i);</span><br><span class=\"line\">            Interval prev = ret.get(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev.end &gt;= cur.start) &#123;</span><br><span class=\"line\">                Interval temp = <span class=\"keyword\">new</span> Interval(Math.min(prev.start, cur.start), Math.max(cur.end, prev.end));</span><br><span class=\"line\">                ret.set(index, temp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.add(cur);</span><br><span class=\"line\">                index++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}