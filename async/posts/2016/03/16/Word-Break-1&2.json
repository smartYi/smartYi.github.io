{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":61},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":59},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":59}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":63}],"url":"/async/posts/2016/03/16/Word-Break-1&2.json","date":1458159666000,"path":{"year":2016,"month":3,"day":16,"name":"Word-Break-1&2"},"title":"Word Break 1&2","permalink":"http://www.smartyi8979.com/2016/03/16/Word-Break-1&2/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>Given a string and a dict, check whether this string can be broken into several strings that are included in the dict.<br><a id=\"more\"></a></p>\n<h4 id=\"Analysis\"><a href=\"#Analysis\" class=\"headerlink\" title=\"Analysis:\"></a>Analysis:</h4><p>一看到这个题目，我的第一想法就是递归，毕竟太过直观。所以开始着手写，但是果不其然，出错了。出错结果是TLE,也就是Time Limited Exception。 那至少证明思路没错，只是不够优化。然后看了看他给出的TLE case，发现存在重复计算，因此我们可以用cache来储存之前的计算结果，这也是一种比较常见的方法，叫做memorization。</p>\n<p>思路：<br>遍历字符串是肯定的，那么遍历的时候如何存储计算结果呢？这里有两种方法，第一可以用一个boolean数组来储存；第二可以用一个map来存储。分别来看看这两种具体做法。</p>\n<ol>\n<li>boolean数组。<ul>\n<li>用一个boolean数组来存储到当前字符为止的字符串能否被正确的分割.</li>\n</ul>\n</li>\n<li>map <ul>\n<li>map用来存储对于已经出现过的字符串，我们是否能够正确分割，如果可以直接返回</li>\n</ul>\n</li>\n</ol>\n<p>个人比较推荐第二种，因为有利于后面follow－up的扩展。</p>\n<p>AC1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordBreak</span><span class=\"params\">(String s, Set&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordDict == <span class=\"keyword\">null</span> || wordDict.size() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果dp[j]可以被分割，且从j到i在字典里面，那么dp[i]也能被正确分割。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dp[j] &amp;&amp; wordDict.contains(s.substring(j,i))) &#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后返回最后一个元素即可。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC2:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Boolean&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordBreak</span><span class=\"params\">(String s, Set&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordDict == <span class=\"keyword\">null</span> || wordDict.size() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordDict.contains(s)) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(s)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.get(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> added = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">            String cur = s.substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            String next = s.substring(i);</span><br><span class=\"line\">            <span class=\"comment\">//递归调用函数。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wordDict.contains(cur) &amp;&amp; wordBreak(next, wordDict)) &#123;</span><br><span class=\"line\">                added = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(s, added);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种解法比较直观，而且立刻能够想得到。</p>\n<p>好，现在来看看follow-up。  </p>\n<p>其实follow-up也是很直接的，上题是叫你判断能否分割正确，这里就直接叫你把所有的分割情况求出来了。  </p>\n<p>做过第一题之后，其实第二题最直观的想法就是在第一题的基础上往下继续做。 那么题目就变成了你已经知道这个字符串某个地方是可以被分割正确的，而且整个字符串也能被分割正确，那么你能否将从头到尾的所有的可能存在整个路径求出来。<br>这也是我最直观的思路。<br>那么这也就需要用递归，可是我想了想，还是很麻烦，因为我还需要直接粘贴第一题AC1的整段代码。我们是否能够从AC2着手想一想能否有更快的方法。<br>我们来看看上一题的AC2的思路，之前说过思路其实很清晰，就是要利用到memorization，那么我们这里是否也可以利用memo来存储之前已经计算的结果，因为毕竟这是能够想到的唯一优化地方。<strong>那既然我们这里要求的事所有可能的组合，那么我们就把之前计算的左右组合储存起来。</strong>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, List&lt;String&gt;&gt; cache = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">wordBreak</span><span class=\"params\">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果已经计算，直接返回结果，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache.containsKey(s)) <span class=\"keyword\">return</span> cache.get(s);</span><br><span class=\"line\">        List&lt;String&gt; result = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dict.contains(s)) result.add(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            String left = s.substring(<span class=\"number\">0</span>,i), right = s.substring(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dict.contains(left)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String ss : wordBreak(right, dict)) &#123;</span><br><span class=\"line\">                    result.add(left + <span class=\"string\">\" \"</span> + ss);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cache.put(s, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}