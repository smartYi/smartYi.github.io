{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":84}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/22/Number-of-Connected-Components-in-an-Undirected-Graph.json","date":1458700879000,"path":{"year":2016,"month":3,"day":22,"name":"Number-of-Connected-Components-in-an-Undirected-Graph"},"title":"Number of Connected Components in an Undirected Graph","permalink":"http://www.smartyi8979.com/2016/03/22/Number-of-Connected-Components-in-an-Undirected-Graph/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">     0          3</span><br><span class=\"line\">     |          |</span><br><span class=\"line\">     1 --- 2    4</span><br><span class=\"line\">Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.</span><br><span class=\"line\"></span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">     0           4</span><br><span class=\"line\">     |           |</span><br><span class=\"line\">     1 --- 2 --- 3</span><br><span class=\"line\">Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>这种题目，一看就知道是求解图中连通图的个数。方法有BFS和DFS。属于比较基础的类型。</p>\n<p>AC1: BFS</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">countComponents</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[][] edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span> || edges.length == <span class=\"number\">0</span> || edges[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        List[] graph = <span class=\"keyword\">new</span> List[n];</span><br><span class=\"line\">        buildGraph(graph, edges);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">                ret++;</span><br><span class=\"line\">                dfs(i, graph, visited);</span><br><span class=\"line\">                <span class=\"comment\">//bfs(i, graph, visited);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildGraph</span><span class=\"params\">(List[] graph, <span class=\"keyword\">int</span>[][] edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = edges.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = edges[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> q = edges[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (graph[p] == <span class=\"keyword\">null</span>) graph[p] = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (graph[q] == <span class=\"keyword\">null</span>) graph[q] = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            graph[p].add(q);</span><br><span class=\"line\">            graph[q].add(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> start, List[] graph, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        queue.offer(start);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = queue.poll();</span><br><span class=\"line\">            visited[cur] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            List&lt;Integer&gt; list = (ArrayList&lt;Integer&gt;)graph[cur];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Integer i : list) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!visited[i]) queue.offer(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> start, List[] graph, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</span><br><span class=\"line\">        visited[start] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        List&lt;Integer&gt; list = (ArrayList&lt;Integer&gt;)graph[start];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer i : list) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i]) dfs(i, graph, visited);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码上看，dfs比bfs要简单。做这种题目最烦人的就是不知道题目给出的n个数要不要用完，所以面试的时候一定要问清楚再写，否则各种烦人小问题。-_-#.<br>另外，这个还可以利用union find来解答，之前的那个surrounded region II也是采用这种方法，但是对于这种方法，我还没掌握透，待我系统的去看一遍算法书，再来更新这种算法的所有题目。</p>\n"}