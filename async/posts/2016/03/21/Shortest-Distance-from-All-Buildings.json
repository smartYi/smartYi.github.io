{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":65},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":67}],"url":"/async/posts/2016/03/21/Shortest-Distance-from-All-Buildings.json","date":1458574958000,"path":{"year":2016,"month":3,"day":21,"name":"Shortest-Distance-from-All-Buildings"},"title":"Shortest Distance from All Buildings","permalink":"http://www.smartyi8979.com/2016/03/21/Shortest-Distance-from-All-Buildings/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:<br><a id=\"more\"></a></p>\n<ul>\n<li>Each 0 marks an empty land which you can pass by freely.</li>\n<li>Each 1 marks a building which you cannot pass through.</li>\n<li>Each 2 marks an obstacle which you cannot pass through.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):</span><br><span class=\"line\">1 - 0 - 2 - 0 - 1</span><br><span class=\"line\">|   |   |   |   |</span><br><span class=\"line\">0 - 0 - 0 - 0 - 0</span><br><span class=\"line\">|   |   |   |   |</span><br><span class=\"line\">0 - 0 - 1 - 0 - 0</span><br><span class=\"line\">The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>pretty hard。一看题目求最短距离再加上矩阵，就知道是利用BFS，但是如果遍历整个数组去BFS，时间复杂度毫无疑问是\\(O(m^2n^2)\\)。我都懒的试这种方法了。但是除了这种方法，也想不出其他办法。看了看讨论区，最优的解决方法时间复杂度是\\(O(tmn)\\)，t是building的数量。</p>\n<ul>\n<li>遍历数组，找出数组中building的数量，也就是1的个数和位置信息；</li>\n<li>以这些位置信息为BFS起始点，搜索整个矩阵，将当前building能够到达的所有位置标记为一个特殊的数字，这里我取－1，然后顺便记录位置信息到达搜索起始点的距离；</li>\n<li>那么进行下一轮BFS搜索时，就只能走数组中我上轮标记的－1的点，因为题目给出的要求是必须所有building都能到达该点；</li>\n<li>不断循环，直至最后一个点遍历结束；然后找出所有building能够到达的点的位置，并且统计他们的距离信息；</li>\n</ul>\n<p>两个二外的二维数组作为存储，一个用来存储当前路径长度，一个用来存储所有路径长度。<br>最后返回所有路径长度里面最短的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">shortestDistance</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid == <span class=\"keyword\">null</span> || grid.length == <span class=\"number\">0</span> || grid[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> target = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//当前路径长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dis = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[row][col];</span><br><span class=\"line\">        <span class=\"comment\">//所有路径长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] total = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[row][col];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    search(grid, i, j, target, dis, total);</span><br><span class=\"line\">                    target--;     </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == target &amp;&amp; total[i][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    ret = Math.min(ret, total[i][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret == Integer.MAX_VALUE? -<span class=\"number\">1</span> : ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span>[][] dis, <span class=\"keyword\">int</span>[][] total)</span> </span>&#123;</span><br><span class=\"line\">        Deque&lt;<span class=\"keyword\">int</span>[]&gt; deque = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dx = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dy = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        deque.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;x, y&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (deque.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] cur = deque.poll();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextX = cur[<span class=\"number\">0</span>] + dx[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextY = cur[<span class=\"number\">1</span>] + dy[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextX &gt;= <span class=\"number\">0</span> &amp;&amp; nextX &lt; grid.length &amp;&amp; nextY &gt;= <span class=\"number\">0</span> </span><br><span class=\"line\">                    &amp;&amp; nextY &lt; grid[<span class=\"number\">0</span>].length &amp;&amp; grid[nextX][nextY] == target) &#123;</span><br><span class=\"line\">                        deque.offer(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;nextX, nextY&#125;);</span><br><span class=\"line\">                        dis[nextX][nextY] = dis[cur[<span class=\"number\">0</span>]][cur[<span class=\"number\">1</span>]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        total[nextX][nextY] += dis[nextX][nextY];</span><br><span class=\"line\">                        grid[nextX][nextY]--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很难。注意逆向思维。别老想着从空地出发，还可以想想从building出发。同样的做法还见于Surrounded Regions那个题目。</p>\n"}