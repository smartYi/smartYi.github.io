{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/25/Palindrome-Partitioning.json","date":1458952532000,"path":{"year":2016,"month":3,"day":25,"name":"Palindrome-Partitioning"},"title":"Palindrome Partitioning","permalink":"http://www.smartyi8979.com/2016/03/25/Palindrome-Partitioning/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>Given a string s, partition s such that every substring of the partition is a palindrome.<br><a id=\"more\"></a></p>\n<p>Return all possible palindrome partitioning of s.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, given s = &quot;aab&quot;,</span><br><span class=\"line\">Return</span><br><span class=\"line\"></span><br><span class=\"line\">  [</span><br><span class=\"line\">    [&quot;aa&quot;,&quot;b&quot;],</span><br><span class=\"line\">    [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>递归无疑。先求解出短字符串的所有解，然后将当前字符串添加进去就行。但是递归也存在如何递归。</p>\n<ul>\n<li>递归方法返回n－1的解法，然后将当前的字符串添加到每个n－1的解法中；<br>这种解法一种优化方法就是利用map来储存已经计算过的值，因为在字符串切分的过程中，存在大量的重复计算，map可以很有效的避免重复计算</li>\n<li>将最终的返回值也传入递归参数，按照backtracking，一步步递归，返回条件是字符串长度为0；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class=\"line\">        List&lt;List&lt;String&gt;&gt; ret = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        Map&lt;String, List&lt;List&lt;String&gt;&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        helper(s, cur, ret);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(String s, List&lt;String&gt; cur, List&lt;List&lt;String&gt;&gt; ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ret.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(cur));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">            String left = s.substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            String right = s.substring(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isPalindrome(left)) &#123;</span><br><span class=\"line\">                cur.add(left);</span><br><span class=\"line\">                helper(right, cur, ret);</span><br><span class=\"line\">                cur.remove(cur.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i) != s.charAt(length - <span class=\"number\">1</span> - i)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我这里采用的是第二种方法，也就是backtracking的方法。递归终止条件就是字符串长度为0的时候。注意，我们这里要采用深拷贝，否则数据之间会造成紊乱。</p>\n"}