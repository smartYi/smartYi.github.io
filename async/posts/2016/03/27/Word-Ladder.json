{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":75},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":76}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":78}],"url":"/async/posts/2016/03/27/Word-Ladder.json","date":1459096751000,"path":{"year":2016,"month":3,"day":27,"name":"Word-Ladder"},"title":"Word Ladder I","permalink":"http://www.smartyi8979.com/2016/03/27/Word-Ladder/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:<br><a id=\"more\"></a></p>\n<ul>\n<li>Only one letter can be changed at a time</li>\n<li>Each intermediate word must exist in the word list</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\"></span><br><span class=\"line\">Given:</span><br><span class=\"line\">beginWord = &quot;hit&quot;</span><br><span class=\"line\">endWord = &quot;cog&quot;</span><br><span class=\"line\">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class=\"line\">As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class=\"line\">return its length 5.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>看到这道题，在草稿纸上画了许久，想出点点思路，却觉得过于复杂而不敢动笔开写。我的思路是：</p>\n<ul>\n<li>因为转换中的每一步都必须是字典里面的单词，因此我们可以枚举单词每个位置的各种情况，实际上是26种情况；</li>\n<li>对于某个单词来说，那么总共有\\(n*26\\)中替换情况，n为单词长度；</li>\n<li>如果\\(n*26\\)中某个单词在字典中，那么就是一次可能的转换，这时候转换长度加1；</li>\n<li>一直重复上述步骤，直至找到endWord</li>\n<li>为什么说上述方法能够保证是最短长度呢？因为在这里我采取的是迭代法，也就是说在每次转换的时候都会判断是否已经是endWord，如果是直接返回，而且返回的肯定是最小值；如果所有可能性都走遍了，还没发现可能转换路径，返回0即可；</li>\n<li>这里还有一个问题就是如何避免重复访问，很简单，将已经访问的单词放进一个set就好；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">ladderLength</span><span class=\"params\">(String beginWord, String endWord, Set&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordList == <span class=\"keyword\">null</span> || wordList.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Set&lt;String&gt; beginSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        Set&lt;String&gt; added = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        beginSet.add(beginWord);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (beginSet.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Set&lt;String&gt; next = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String word : beginSet) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] arr = word.toCharArray();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> old = arr[i];</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c = <span class=\"string\">'a'</span>; c &lt;= <span class=\"string\">'z'</span>; c++) &#123;</span><br><span class=\"line\">                        arr[i] = c;</span><br><span class=\"line\">                        String temp = String.valueOf(arr);</span><br><span class=\"line\">                        <span class=\"comment\">//如果相等，直接返回长度加1；</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp.equals(endWord)) <span class=\"keyword\">return</span> ret + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//判断是否在字典中和是否已经访问过，避免重复访问造成死循环</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!added.contains(temp) &amp;&amp; wordList.contains(temp)) &#123;</span><br><span class=\"line\">                            added.add(temp);</span><br><span class=\"line\">                            next.add(temp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    arr[i] = old;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            beginSet = next;</span><br><span class=\"line\">            ret++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果走完所有可能性还没有返回值，那就证明不存在转换路径，返回0.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跑完之后，看了一下时间，175ms，理所当然，应为毕竟循环多，考虑情况多。但重点是还有很多时间是几十ms的。不能忍，看一下讨论区，看他们是怎么优化的。<br>优化的方法很巧妙，之前在算法那本书上也看到过，但是没怎么留下印象。  </p>\n<ul>\n<li>上面的思路就是从beginSet出发，然后一步步找到endWord，但其实有一种方法可以加速搜索，那就是双向搜索；</li>\n<li>除了维护一个beginSet之外，我们还维护一个endSet，每次beiginSet就行转换时就判定转换单词是否在endSet中，如果是的，那么就直接返回；</li>\n<li>那么endSet和beginSet之间如何切换，我们始终保证beginSet的size小于endSet即可；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">ladderLength</span><span class=\"params\">(String beginWord, String endWord, Set&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordList == <span class=\"keyword\">null</span> || wordList.size() &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Set&lt;String&gt; beginSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        Set&lt;String&gt; endSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        Set&lt;String&gt; added = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        beginSet.add(beginWord);</span><br><span class=\"line\">        endSet.add(endWord);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (beginSet.size() &gt; <span class=\"number\">0</span> &amp;&amp; endSet.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (beginSet.size() &gt; endSet.size()) &#123;</span><br><span class=\"line\">                Set&lt;String&gt; exc = beginSet;</span><br><span class=\"line\">                beginSet = endSet;</span><br><span class=\"line\">                endSet = exc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Set&lt;String&gt; next = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String word : beginSet) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] arr = word.toCharArray();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> old = arr[i];</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c = <span class=\"string\">'a'</span>; c &lt;= <span class=\"string\">'z'</span>; c++) &#123;</span><br><span class=\"line\">                        arr[i] = c;</span><br><span class=\"line\">                        String temp = String.valueOf(arr);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (endSet.contains(temp)) <span class=\"keyword\">return</span> ret + <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!added.contains(temp) &amp;&amp; wordList.contains(temp)) &#123;</span><br><span class=\"line\">                            added.add(temp);</span><br><span class=\"line\">                            next.add(temp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    arr[i] = old;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            beginSet = next;</span><br><span class=\"line\">            ret++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>双向搜索的耗时26ms，简直不能太快。这里其实为什么我们要进行交换呢，也就是为什么要判断beginSet和endSet的大小呢？其实不用也能通过，但是不切换的话，和上面的单向搜索是一样的好嘛。我们在beginSet 和endSet 之间不断切换，保证每次搜索的都是size较小的那个，这样就能够保证两边的搜索在极大程度上步调一致。</p>\n"}