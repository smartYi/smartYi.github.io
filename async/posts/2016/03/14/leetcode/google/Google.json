{"tags":[],"categories":[],"url":"/async/posts/2016/03/14/leetcode/google/Google.json","date":1457968254000,"path":{"year":2016,"month":3,"day":14,"name":"leetcode/google/Google"},"title":"Google","permalink":"http://www.smartyi8979.com/2016/03/14/leetcode/google/Google/","content":"<h3 id=\"Google-form-Leetcode\"><a href=\"#Google-form-Leetcode\" class=\"headerlink\" title=\"Google form Leetcode\"></a>Google form Leetcode</h3><p>####Problem 4: Median of two sorted array<br><a id=\"more\"></a><br>Problem:<br>Given two sorted array, find the median of these two arrays.<br>Analysis:<br>1: Merge these two sorted array, and find the median of the merged array. Time complexity of this method is <strong>O(m + n)</strong>, ()m, n) is the array length respectively.<br>2: Binary Search. Time complexity is (log(m+n))  </p>\n<ul>\n<li>First choose the median of the first sorted array, say the index is $i$, and then use formula $j = k - 1 - i$ to determine the corresponding index in the second array;</li>\n<li>Compare these two elements, if the first element is bigger than the second one, which means all the elements in the second array before index $j$ can be discarded and then update the parameters; Vice versa;</li>\n<li>After update the parameters and continue recursively find the target element;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// return mn(nums1, nums2);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> logmn(nums1, nums2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//This is log(m+n) solution.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">logmn</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l1 = nums1.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l2 = nums2.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((l1 + l2) % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> find(nums1, <span class=\"number\">0</span>, l1 - <span class=\"number\">1</span>, nums2, <span class=\"number\">0</span>, l2 - <span class=\"number\">1</span>, (l1 + l2) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((find(nums1, <span class=\"number\">0</span>, l1 - <span class=\"number\">1</span>, nums2, <span class=\"number\">0</span>, l2 - <span class=\"number\">1</span>, (l1 + l2) / <span class=\"number\">2</span> - <span class=\"number\">1</span>)) + </span><br><span class=\"line\">            (find(nums1, <span class=\"number\">0</span>, l1 - <span class=\"number\">1</span>, nums2, <span class=\"number\">0</span>, l2 - <span class=\"number\">1</span>, (l1 + l2) / <span class=\"number\">2</span>))) / <span class=\"number\">2.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> s1, <span class=\"keyword\">int</span> e1, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> s2, <span class=\"keyword\">int</span> e2, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> aLength = e1 - s1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bLength = e2 - s2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aLength == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums2[s2 + k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bLength == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums1[s1 + k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.min(nums1[s1], nums2[s2]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = aLength * k / (aLength + bLength);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = k - <span class=\"number\">1</span> - i;</span><br><span class=\"line\">        i = i + s1;</span><br><span class=\"line\">        j = j + s2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class=\"line\">            k = k - ( j -  s2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">            s2 = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            e1 = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            k = k - (i - s1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">            s1 = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            e2 = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(nums1, s1, e1, nums2, s2, e2, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//This is O(m+n) solution.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">mn</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = nums1.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums2.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] merge = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m + n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; m &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class=\"line\">                merge[index++] = nums1[i++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                merge[index++] = nums2[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; m; i++) &#123;</span><br><span class=\"line\">            merge[index++] = nums1[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; j &lt; n; j++) &#123;</span><br><span class=\"line\">            merge[index++] = nums2[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((m + n) % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)(merge[(m+n)/<span class=\"number\">2</span>] + merge[(m+n)/<span class=\"number\">2</span> - <span class=\"number\">1</span>]) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> merge[(m+n)/<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 10: Regular Expression Matching<br>Problem:<br>Given an regular expression and a string to determine whether this regular expression can match this string.<br>Analysis:<br>真是够难的。难度在于如何分析$*$号。<br>假设regular expression字符串是p，匹配字符串是s；</p>\n<ul>\n<li><p>首先分析题意:<br>$.$号代表一个任意的字符，$*$代表零个或者多个前驱字符，那么重点就在如何分情况讨论零个或者多个前驱字符情况；  </p>\n</li>\n<li><p>如果当前字符的下一个字符是$*$字符，那么存在以下可能性；</p>\n<ol>\n<li>零个字符，那么这种情况意味着$x*$这两个字符没起到任何作用，其效果等价于匹配$s$和$p.substring(2)$;</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>假设代表多个前驱字符，那么我们需要每次对当前的字符和匹配字符进行比较，比较的结果两种：<ul>\n<li>两者字符相同，包含字符相同和匹配字符是$.$的情况，那么$s = s.substring(1)$; p不变，因为可能是匹配多个前驱字符；</li>\n<li>两者字符不同，直接返回false；</li>\n<li>其伪码形式如下：</li>\n</ul>\n</li>\n</ol>\n<p><code>if (s[i] == p[i] || p[i] == &#39;.&#39;); s = s.substring(1);</code><br><code>else return false;</code>  </p>\n<ul>\n<li>如果当前字符的下一个字符不是$*$字符，那么p往后移动就好；</li>\n</ul>\n<p>AC代码：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.length(); s = s.substring(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t <span class=\"keyword\">char</span> cur = p.charAt(i);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &gt;= p.length() || p.charAt(i + <span class=\"number\">1</span>) != <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t&#125;  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isMatch(s, p.substring(<span class=\"number\">2</span>)))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s.isEmpty() || (s.charAt(<span class=\"number\">0</span>) != cur &amp;&amp; cur != <span class=\"string\">'.'</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 20: Valid Parentheses<br>Problem: Given a string, valid if this is a valid parentheses.<br>Analysis: Classic stack problem.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;Character&gt; deque = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deque.isEmpty()) &#123;</span><br><span class=\"line\">                deque.push(cur);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur - deque.peek() == <span class=\"number\">1</span> || cur - deque.peek() == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                deque.pop();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                deque.push(cur);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deque.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 22:  Generate Parentheses<br>Problem: Given a number, generate n pairs of valid parentheses.<br>Analysis: Use two index to indicate the left number of right and left parenthese respectively.</p>\n<p>AC代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">generateParenthesis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        String cur = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        helper(n ,n, cur, ret);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> left, String cur, List&lt;String&gt; ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right == <span class=\"number\">0</span> &amp;&amp; left == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ret.add(cur);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            helper(right, left - <span class=\"number\">1</span>, cur + <span class=\"string\">\"(\"</span>, ret);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            helper(right - <span class=\"number\">1</span>, left, cur + <span class=\"string\">\")\"</span>, ret);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 23: 23. Merge k Sorted Lists<br>Problem: Given k sorted linkedlist, merge them into one sorted linkedlist and analyse the time complexity.<br>假设k条链表，每条链表长度是n。<br>Analysis: </p>\n<ul>\n<li>首先，我们可以一个个合并下去，这样做的时间复杂度是$O(nk^2)$.<br>分析：每次进行合并，链表长度都会增加一倍，这样当最后一次合并时是长度为$(k-1)*n$和$n$进行合并，复杂度是$O(nk)$,而最外层又有一个长度为k的循环，因此最坏的情况就是$O(nk^2)$.</li>\n<li>可以借鉴归并排序的思想，将两两长度为n的链表进行合并，然后再对2<em>n的链表进行合并，尽管这样最后一个步骤的合并是$n</em>k/2$的两条链表进行合并，复杂度也是$O(nk)$,但是外层循环的次数减为$k/2 + k/4 + k/8 + … = log(k)$,因此总体复杂度是$O(nklog(k))$.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lists == <span class=\"keyword\">null</span> || lists.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = lists.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (end &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">                lists[start] = merge(lists[start], lists[end]);</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode cur = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l1 != <span class=\"keyword\">null</span> &amp;&amp; l2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">                cur.next = l1;</span><br><span class=\"line\">                l1 = l1.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur.next = l2;</span><br><span class=\"line\">                l2 = l2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur.next = l1 == <span class=\"keyword\">null</span>? l2:l1;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 44: Wildcard Matching<br>Problem: Given a string and a regular expression, check whether these two strings match.<br>Too hard…..</p>\n<p>####Problem 56:  Merger Intervals<br>Problem: Given a set of intervals, merge them if any of them overlap each other.<br>Analysis: Sort and traversal.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for an interval.</span><br><span class=\"line\"> * public class Interval &#123;</span><br><span class=\"line\"> *     int start;</span><br><span class=\"line\"> *     int end;</span><br><span class=\"line\"> *     Interval() &#123; start = 0; end = 0; &#125;</span><br><span class=\"line\"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title\">merge</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Interval&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals == <span class=\"keyword\">null</span> || intervals.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Collections.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;Interval&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Interval l1, Interval l2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> l1.start - l2.start;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ret.add(intervals.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">            Interval cur = intervals.get(i);</span><br><span class=\"line\">            Interval prev = ret.get(index);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev.end &gt;= cur.start) &#123;</span><br><span class=\"line\">                Interval temp = <span class=\"keyword\">new</span> Interval(Math.min(prev.start, cur.start), Math.max(cur.end, prev.end));</span><br><span class=\"line\">                ret.set(index, temp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.add(cur);</span><br><span class=\"line\">                index++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 57: Insert intervals<br>Problem: Given a set of sorted intervals based on their start time and a new interval; insert this new interval and merge the intervals where necessary.<br>Analysis: First traversal insert and merge as what has been done in 56.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title\">insert</span><span class=\"params\">(List&lt;Interval&gt; intervals, Interval newInterval)</span> </span>&#123;</span><br><span class=\"line\">       List&lt;Interval&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">boolean</span> added = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newInterval.start &lt; intervals.get(i).start) &#123;</span><br><span class=\"line\">               intervals.add(i, newInterval);</span><br><span class=\"line\">               added = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!added) &#123;</span><br><span class=\"line\">           intervals.add(newInterval);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       ret.add(intervals.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">       <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.size(); i++) &#123;</span><br><span class=\"line\">           Interval cur = intervals.get(i);</span><br><span class=\"line\">           Interval prev = ret.get(index);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (prev.end &gt;= cur.start) &#123;</span><br><span class=\"line\">               Interval temp = <span class=\"keyword\">new</span> Interval(Math.min(prev.start, cur.start),Math.max(cur.end, prev.end));</span><br><span class=\"line\">               ret.set(index, temp);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               ret.add(cur);</span><br><span class=\"line\">               index++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 66: Plus one<br>Problem: Given a number represented as an array, let one plus this number and return the new array.<br>Analysis: Easy. But should consider the carry situation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] plusOne(<span class=\"keyword\">int</span>[] digits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = digits.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=length;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(digits[i]!=<span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">                digits[i]++;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] newDigits = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[digits.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">            newDigits[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;digits.length;i++)&#123;</span><br><span class=\"line\">                newDigits[i+<span class=\"number\">1</span>] = digits[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newDigits;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 139&amp;140: Word Break 1&amp;2</p>\n<ol>\n<li>Problem: Given a string and a dict, check whether this string can be broken into several strings that are included in the dict.<br>Analysis: DP. Construct a dp bool array, and each element in the array indicates whether there exists a way that the string till current element can be broken into words that are included in the dict.</li>\n</ol>\n<p>AC1:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordBreak</span><span class=\"params\">(String s, Set&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordDict == <span class=\"keyword\">null</span> || wordDict.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dp[j] &amp;&amp; wordDict.contains(s.substring(j, i))) &#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>A trick should be metioned here is to memorize the calculated result, and return directly if we want the same calculation.</strong><br>AC2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Boolean&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">wordBreak</span><span class=\"params\">(String s, Set&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordDict == <span class=\"keyword\">null</span> || wordDict.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordDict.contains(s)) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(s)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.get(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ret = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">            String left = s.substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            String right = s.substring(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wordDict.contains(left) &amp;&amp; wordBreak(right, wordDict)) &#123;</span><br><span class=\"line\">                ret = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.put(s, ret);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>The same problem as above, you should get all the possible break ways this time, however.<br>Analysis: Traversal all the possible prefix possibilities and then recursively call the function.<br><strong>A trick should be metioned here is to memorize the calculated result, and return directly if we want the same calculation.</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, List&lt;String&gt;&gt; cache = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">wordBreak</span><span class=\"params\">(String s, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache.containsKey(s)) <span class=\"keyword\">return</span> cache.get(s);</span><br><span class=\"line\">        List&lt;String&gt; result = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dict.contains(s)) result.add(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            String left = s.substring(<span class=\"number\">0</span>,i), right = s.substring(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dict.contains(left)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String ss : wordBreak(right, dict)) &#123;</span><br><span class=\"line\">                    result.add(left + <span class=\"string\">\" \"</span> + ss);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cache.put(s, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 146: LRU<br>Problem: Design and implement a LRU cache<br>Analysis:  Using LinkedHashMap.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> LinkedHashOwnMap&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.get(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedHashOwnMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedHashOwnMap</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"number\">16</span>, <span class=\"number\">0.75f</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeEldestEntry</span><span class=\"params\">(Map.Entry eldest)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size() &gt; capacity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 155: Min stack<br>Problem: Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>Analysis: Using linkedlist or arraydeque data structure, but the data node should not only contains current value, but also current minimum.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedListNode</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min;</span><br><span class=\"line\">        LinkedListNode next;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedListNode</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> min)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.val = x;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.min = min;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> LinkedListNode head;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head = <span class=\"keyword\">new</span> LinkedListNode(x,x);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            LinkedListNode newHead = <span class=\"keyword\">new</span> LinkedListNode(x,Math.min(x,head.min));</span><br><span class=\"line\">            newHead.next = head;</span><br><span class=\"line\">            head = newHead;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head != <span class=\"keyword\">null</span>) head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> head.min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 162: Peak element<br>Problem: Given an array, find one peak element index and return;<br>Analysis: Binary search<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findPeakElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; nums[mid + <span class=\"number\">1</span>]) left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 166: Fraction to decimal<br>Problem: Given two numbers, one is numerator and the other one is denominator.<br>return the fraction as string format.<br>Analysis: Hashtable and recursively modular until encounter the same remainder.</p>\n<p>好难啊。。。。。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fractionToDecimal</span><span class=\"params\">(<span class=\"keyword\">int</span> numerator, <span class=\"keyword\">int</span> denominator)</span> </span>&#123;</span><br><span class=\"line\">     String ret = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (denominator == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ((numerator &lt; <span class=\"number\">0</span> &amp;&amp; denominator &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\">        || (numerator &gt; <span class=\"number\">0</span> &amp;&amp; denominator &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> num = Math.abs((<span class=\"keyword\">long</span>)numerator);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> den = Math.abs((<span class=\"keyword\">long</span>)denominator);</span><br><span class=\"line\">     sb.append(num / den);</span><br><span class=\"line\">     <span class=\"keyword\">long</span> remainder = num % den;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (remainder == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     sb.append(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">     Map&lt;Long, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">     map.put(remainder, sb.length());</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (remainder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         remainder *= <span class=\"number\">10</span>;</span><br><span class=\"line\">         sb.append(remainder / den);</span><br><span class=\"line\">         remainder = remainder % den;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (map.containsKey(remainder)) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> pos = map.get(remainder);</span><br><span class=\"line\">             sb.insert(pos, <span class=\"string\">\"(\"</span>);</span><br><span class=\"line\">             sb.append(<span class=\"string\">\")\"</span>);</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             map.put(remainder, sb.length());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 173: Binary Search Tree Iterator<br>Problem:<br>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.<br>Calling next() will return the next smallest number in the BST.<br>Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</p>\n<p>Analysis: Just like the pre-order traversal. Use a stack to store current node.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for binary tree</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSTIterator</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack;</span><br><span class=\"line\">    TreeNode nextTreeNode;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BSTIterator</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        stack = <span class=\"keyword\">new</span> Stack&lt;TreeNode&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root = root.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@return</span> whether we have a next smallest number */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@return</span> the next smallest number */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        nextTreeNode = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextTreeNode.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            TreeNode right = nextTreeNode.right;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                stack.push(right);</span><br><span class=\"line\">                right = right.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextTreeNode.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 200: Number of Islands<br>Problem: Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<p>Analysis: Classic graph problem, just count the number of graph in a graphs.<br>DFS or BFS.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        m = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] != <span class=\"string\">'1'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                dfs(grid, i , j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt;= m || j &lt; <span class=\"number\">0</span> || j &gt;= n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">            grid[i][j] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            dfs(grid, i-<span class=\"number\">1</span>, j);</span><br><span class=\"line\">            dfs(grid, i+<span class=\"number\">1</span>, j);</span><br><span class=\"line\">            dfs(grid, i, j-<span class=\"number\">1</span>);</span><br><span class=\"line\">            dfs(grid, i, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 208: Implement Trie<br>Analysis: For each node in trie, an array with 26 children nodes is included.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize your data structure here.</span></span><br><span class=\"line\">    TrieNode[] children;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isWord;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isPrefix;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrieNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        children = <span class=\"keyword\">new</span> TrieNode[<span class=\"number\">26</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrieNode</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children = <span class=\"keyword\">new</span> TrieNode[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isWord = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isPrefix = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TrieNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Trie</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> TrieNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Inserts a word into the trie.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = word.length();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = word.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = cur - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.children[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                node.children[index] = <span class=\"keyword\">new</span> TrieNode(cur);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.isWord = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns if the word is in the trie.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = word.length();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = word.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = cur - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.children[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isWord;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns if there is any word in the trie</span></span><br><span class=\"line\">    <span class=\"comment\">// that starts with the given prefix.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = prefix.length();</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = prefix.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = cur - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.children[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.children[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isPrefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 214: Shortest Palindrome<br>Analysis: KMP</p>\n<p>####Problem 218: The skyline Problem<br>Analysis: Segement Tree.</p>\n<p>####Problem 224: Basic Calculator<br>Problem: Given a valid arithmetic equation, calculate the result.<br>Analysis:<br>There are only five cases we should handle:</p>\n<ul>\n<li>digit: it should be one digit from the current number</li>\n<li>‘+’: number is over, we can add the previous number and start a new number</li>\n<li>‘-‘: same as above</li>\n<li>‘(‘: push the previous result and the sign into the stack, set result to 0, just calculate the new result within the parenthesis.</li>\n<li>‘)’: pop out the top two numbers from stack, first one is the sign before this pair of parenthesis, second is the temporary result before this pair of parenthesis. We add them together. </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Character.isDigit(c))&#123;</span><br><span class=\"line\">            number = <span class=\"number\">10</span> * number + (<span class=\"keyword\">int</span>)(c - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'+'</span>)&#123;</span><br><span class=\"line\">            result += sign * number;</span><br><span class=\"line\">            number = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">            result += sign * number;</span><br><span class=\"line\">            number = <span class=\"number\">0</span>;</span><br><span class=\"line\">            sign = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//we push the result first, then sign;</span></span><br><span class=\"line\">            stack.push(result);</span><br><span class=\"line\">            stack.push(sign);</span><br><span class=\"line\">            <span class=\"comment\">//reset the sign and result for the value in the parenthesis</span></span><br><span class=\"line\">            sign = <span class=\"number\">1</span>;   </span><br><span class=\"line\">            result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">')'</span>)&#123;</span><br><span class=\"line\">            result += sign * number;  </span><br><span class=\"line\">            number = <span class=\"number\">0</span>;</span><br><span class=\"line\">            result *= stack.pop();    <span class=\"comment\">//stack.pop() is the sign before the parenthesis</span></span><br><span class=\"line\">            result += stack.pop();   <span class=\"comment\">//stack.pop() now is the result calculated before the parenthesis</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(number != <span class=\"number\">0</span>) result += sign * number;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 228: Summary ranges<br>Problem:<br>Given a sorted integer array without duplicates, return the summary of its ranges.<br>Analysis:<br>If increment by 1, continue extend range.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">summaryRanges</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ret.add(nums[<span class=\"number\">0</span>] + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> base = nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i + <span class=\"number\">1</span> &lt; length &amp;&amp; (nums[i+<span class=\"number\">1</span>] - nums[i]) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] != base) &#123;</span><br><span class=\"line\">                ret.add(base + <span class=\"string\">\"-&gt;\"</span> + nums[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ret.add(base + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 230: Kth element in BST<br>Problem: Given a BST and a number k, find the kth smallest element in the BST<br>Analysis:<br>Pretty much like pre-order traversal. And then decrement 1 each pop until k == 0.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;TreeNode&gt;();</span><br><span class=\"line\">        TreeNode n = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(n);</span><br><span class=\"line\">            n = n.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(k &gt; <span class=\"number\">0</span> &amp;&amp; (n != <span class=\"keyword\">null</span> || !stack.isEmpty())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                n = stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(--k == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> n.val;</span><br><span class=\"line\">                n = n.right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stack.push(n);</span><br><span class=\"line\">                n = n.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 240: Find in the 2D matrix<br>Simple question:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = matrix.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> column = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = column - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; row &amp;&amp; j &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &lt; matrix[i][j]) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; matrix[i][j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 257: Binary tree path<br>Problem: Given a BST, find all paths from root to leaf.<br>Analysis: Recursively do this.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">binaryTreePaths</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            list.add(root.val + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                list.addAll(binaryTreePaths(root.left));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                list.addAll(binaryTreePaths(root.right));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;list.size();i++) &#123;</span><br><span class=\"line\">                list.set(i, root.val + <span class=\"string\">\"-&gt;\"</span> +list.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 274: H-index<br>Problem:</p>\n<ul>\n<li>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher’s h-index.</li>\n</ul>\n<p>Analysis: </p>\n<ol>\n<li>Using sort</li>\n<li>Using extra space.</li>\n</ol>\n<p>AC1:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Arrays.sort(citations);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = citations.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maximum = citations[length-<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=maximum;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = helper(citations, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp == -<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> index = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] citations, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;citations.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(citations[i] &gt;= n) number++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number&gt;=n?n:-<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AC2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hIndex</span><span class=\"params\">(<span class=\"keyword\">int</span>[] citations)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (citations == <span class=\"keyword\">null</span> || citations.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = citations.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = citations[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur &gt;= length) &#123;</span><br><span class=\"line\">                arr2[length]++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                arr2[cur]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = length; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            ret += arr2[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &gt;= i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 279: Minimum squares<br>Problem: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.</p>\n<p>Analysis: DP. Using a dp array to represent the least number of perfect squares needed to sum to current digit.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numSquares</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Math.sqrt(i) == (<span class=\"keyword\">int</span>)(Math.sqrt(i))) &#123;</span><br><span class=\"line\">                dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[i] = min(i,dp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] dp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minimum = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=(n/<span class=\"number\">2</span>);i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[i] + dp[n-i] &lt; minimum) minimum = dp[i] + dp[n-i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minimum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 282:  Expression Add Operators<br>Problem:<br><strong>Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.</strong><br>Analysis:<br><strong>Using DFS. Maintain two variables to indicate current accumulation and to be operated this time. What should be mentioned is that when multiply an equation, special cases should be considered.</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">addOperators</span><span class=\"params\">(String num, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == <span class=\"keyword\">null</span> || num.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String cur = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        helper(num, (<span class=\"keyword\">long</span>)target, cur, ret, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(String num, <span class=\"keyword\">long</span> target, String cur, List&lt;String&gt; ret, <span class=\"keyword\">long</span> curNum, <span class=\"keyword\">long</span> diff)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Diff variable to store current to be operated, specially for multiply case. </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num.length() == <span class=\"number\">0</span> &amp;&amp; target == curNum) &#123;</span><br><span class=\"line\">            ret.add(cur);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = num.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= length; i++) &#123;</span><br><span class=\"line\">            String curStr = num.substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> temp = Long.parseLong(curStr);</span><br><span class=\"line\">            String next = num.substring(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curStr.length() &gt; <span class=\"number\">1</span> &amp;&amp; curStr.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'0'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                helper(next, target, cur + <span class=\"string\">\"+\"</span> + temp, ret, curNum + temp, temp);</span><br><span class=\"line\">                helper(next, target, cur + <span class=\"string\">\"-\"</span> + temp, ret, curNum - temp, -temp);</span><br><span class=\"line\">                helper(next, target, cur + <span class=\"string\">\"*\"</span> + temp, ret, (curNum - diff) + diff * temp, diff * temp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                helper(next, target, curStr, ret, temp, temp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 284: Peeking iterator<br>Problem:<br><strong>Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation – it essentially peek() at the element that will be returned</strong>  <strong><em>by the next call to next().</em></strong></p>\n<p>Analysis:<br>Since <code>peek()</code> method gets  the element that will be returned  <strong><em>by the next call to next().</em></strong> We can cache the next element advance, to do this, we should call <code>next()</code> method in the constructor and each time call <code>next()</code> method, cache the next element in advance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java Iterator interface reference:</span></span><br><span class=\"line\"><span class=\"comment\">// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeekingIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Iterator&lt;Integer&gt; iterator;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer nextInteger = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PeekingIterator</span><span class=\"params\">(Iterator&lt;Integer&gt; iterator)</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// initialize any member here.</span></span><br><span class=\"line\">\t    <span class=\"keyword\">this</span>.iterator = iterator;</span><br><span class=\"line\">\t    next();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns the next element in the iteration without advancing the iterator.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextInteger;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// hasNext() and next() should behave the same as in the Iterator interface.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Override them if needed.</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    Integer temp = nextInteger;</span><br><span class=\"line\">\t    nextInteger = iterator.hasNext()?iterator.next():<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> nextInteger != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 289: Game of life.<br>Analysis: Using bit manipulation to indicate the status of current living status and next status.</p>\n<p><strong><em>[next status, current status]:  [00][01][10][11]</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">gameOfLife</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] board)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board == <span class=\"keyword\">null</span> || board[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = board.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> col = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> number = check(board, i, j, row, col);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((number &gt;= <span class=\"number\">2</span> &amp;&amp; number &lt;= <span class=\"number\">3</span>) &amp;&amp; board[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    board[i][j] += <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (number == <span class=\"number\">3</span> &amp;&amp; board[i][j] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    board[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++) &#123;</span><br><span class=\"line\">                board[i][j] &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] board, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = Math.max(i-<span class=\"number\">1</span>, <span class=\"number\">0</span>); x &lt;= Math.min(i + <span class=\"number\">1</span>, row - <span class=\"number\">1</span>); x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = Math.max(j - <span class=\"number\">1</span>, <span class=\"number\">0</span>); y &lt;= Math.min(j + <span class=\"number\">1</span>, col - <span class=\"number\">1</span>); y++) &#123;</span><br><span class=\"line\">                ret += (board[x][y] &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ret -= (board[i][j] &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 295: Find Median from Data Stream<br>Analysis:<br><strong>维护一个最大堆，一个最小堆。最大堆存的是到目前为止较小的那一半数，最小堆存的是到目前为止较大的那一半数，这样中位数只有可能是堆顶或者堆顶两个数的均值。而维护两个堆的技巧在于判断堆顶数和新来的数的大小关系，还有两个堆的大小关系。我们将新数加入堆后，要保证两个堆的大小之差不超过1。先判断堆顶数和新数的大小关系，有如下三种情况：最小堆堆顶小于新数时，说明新数在所有数的上半部分。最小堆堆顶大于新数，但最大堆堆顶小于新数时，说明新数将处在最小堆堆顶或最大堆堆顶，也就是一半的位置。最大堆堆顶大于新数时，说明新数将处在所有数的下半部分。再判断两个堆的大小关系，如果新数不在中间，那目标堆不大于另一个堆时，将新数加入目标堆，否则将目标堆的堆顶加入另一个堆，再把新数加入目标堆。如果新数在中间，那加到大小较小的那个堆就行了（一样大的话随便，代码中是加入最大堆）。这样，每次新加进来一个数以后，如果两个堆一样大，则中位数是两个堆顶的均值，否则中位数是较大的那个堆的堆顶。</strong></p>\n<p><strong><em>Java中实现最大堆是在初始化优先队列时加入一个自定义的Comparator，默认初始堆大小是11。Comparator实现compare方法时，用arg1 - arg0来表示大的值在前面</em></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MedianFinder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//This problem needs two heaps, one is max heap and the other one is min heap</span></span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; maxHeap;</span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; minHeap;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MedianFinder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        maxHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"keyword\">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2 - o1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        minHeap = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Adds a number into the data structure.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addNum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxHeap.size() == <span class=\"number\">0</span> || num &lt;= maxHeap.peek()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxHeap.size() &gt; minHeap.size()) &#123;</span><br><span class=\"line\">                minHeap.offer(maxHeap.poll());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxHeap.offer(num);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (minHeap.size() == <span class=\"number\">0</span> || num &gt; minHeap.peek()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minHeap.size() &gt; maxHeap.size()) &#123;</span><br><span class=\"line\">                maxHeap.offer(minHeap.poll());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            minHeap.offer(num);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxHeap.size() &lt;= minHeap.size()) &#123;</span><br><span class=\"line\">                maxHeap.offer(num);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                minHeap.offer(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Returns the median of current data stream</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedian</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxHeap.size() == minHeap.size() ? (maxHeap.peek() + minHeap.peek()) / <span class=\"number\">2.0</span> : </span><br><span class=\"line\">                                 (maxHeap.size() &gt; minHeap.size()) ? maxHeap.peek() : minHeap.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>####Problem 309:  Best Time to Buy and Sell Stock with Cooldown<br>Analysis:<br>维护两个dp数组，一个叫做sell，一个叫做buy。</p>\n<ul>\n<li><code>sell[i]</code>代表的是在第$i$天卖出股票所能获得里利润，那么它的状态转移方程是：$$sell[i]=max(buy[i-1]+prices[i], sell[i-1]+offset)$$<br>其中<code>prices[i]</code>代表今日股票价格，$offset$代表$prices[i]-prics[i-1]$,也就是说第$i$天卖出股票所获得利润为：<ul>\n<li>第$i-1$天买入股票时的利润加上今天股价；</li>\n<li>第$i-1$天卖出后反悔，到今天再卖出的利润；</li>\n<li>这里反悔的意思代表，不同于第$i-1$天持有股票并且卖出，我今天依旧持有股票且今天卖出；</li>\n<li>今天卖出的利润取上述两者之间的最大值；</li>\n</ul>\n</li>\n<li><code>buy[i]</code>代表第<code>i</code>天买入时的利润，那么它的状态转移方程是：<br>$$buy[i] = max(buy[i-1]-offset, sell[i-2]-prices[i])$$<br>也就是说第$i$天买入股票所能获得的利润<ul>\n<li>第$i-1$天买入，但反悔改为今天买入所能获得的利润；</li>\n<li>第$i-2$天卖出，今天买入时所能获得的利润，因为存在cooldown；</li>\n</ul>\n</li>\n</ul>\n<p>值得注意的是，这两个dp数组代表的都是利润。<br>有了这两个利润数组，我们的目的就是找出sell数组中的最大值，因为只有在sell，也就是卖出的过程中才能获得最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prices == <span class=\"keyword\">null</span> || prices.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = prices.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] sells = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] buys = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">        </span><br><span class=\"line\">        sells[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        buys[<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maximum = sells[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> offset = prices[i] - prices[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">            sells[i] = Math.max(sells[i-<span class=\"number\">1</span>]+offset, buys[i-<span class=\"number\">1</span>]+prices[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sells[i] &gt; maximum) maximum = sells[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i&gt;=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                buys[i] = Math.max(buys[i-<span class=\"number\">1</span>]-offset, sells[i-<span class=\"number\">2</span>] - prices[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                buys[i] = buys[i-<span class=\"number\">1</span>] - offset;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maximum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 310: Minimum Height Trees<br>Analysis: 和拓扑排序类似，逐层删除叶子，直至剩下根节点为止。<br>时间复杂度是$O(n)$。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findMinHeightTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[][] edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            ret.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List[] list = <span class=\"keyword\">new</span> List[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) list[i] = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] edge : edges) &#123;</span><br><span class=\"line\">            list[edge[<span class=\"number\">0</span>]].add(edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            list[edge[<span class=\"number\">1</span>]].add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Integer&gt; leaf = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list[i].size() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                leaf.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            n -= leaf.size();</span><br><span class=\"line\">            List&lt;Integer&gt; newLeaf = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Integer i : leaf) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>)list[i].iterator().next();</span><br><span class=\"line\">                list[j].remove(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (list[j].size() == <span class=\"number\">1</span>) newLeaf.add(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            leaf = newLeaf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leaf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 312: Burst Balloons<br>Analysis:<br><strong>dp[l][r]表示扎破(l, r)范围内所有气球获得的最大硬币数，不含边界；一开始我们对input的nums数组左右两边分别加上1，然后求d[0][n-1]就行 l与r的跨度k从2开始逐渐增大；对于d矩阵我们初始化为0，逐个斜对角线赋值，即l - r == k. 因为只有在k == 2的时候，即[l, r]区间内有一个气球的时候，才会有值，所以从k == 2开始. 我们如何求dp[l][r]呢？这里我们用最后一个气球作为分类，在(l,r)区间burst 气球的方案可以按最后剩下的那个气球是哪个来分类，如果最后剩下的是第l&lt;i&lt;r个气球，那么dp[l][r]（关于i） = nums[l] <em> nums[i] </em> nums[r] + dp[l][i] + dp[i][r]。因此我们可以选取这些方案中最大的然后再要循环l-r了，这里从第k == 2开始，即在nums上，l从0开始一直到n-k-1, 对应r = k - l</strong></p>\n<p>时间复杂度：$O(n^3)$<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxCoins</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] newNums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length + <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) newNums[i + <span class=\"number\">1</span>] = nums[i];</span><br><span class=\"line\">        newNums[<span class=\"number\">0</span>] = newNums[length + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//dp[i][j]代表的是刺破(i,j)之间的气球所能得到的分数。不包含边界。</span></span><br><span class=\"line\">        <span class=\"comment\">//因此我们的目的就是求出dp[0][length+1]。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length + <span class=\"number\">2</span>][length + <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">2</span>; k &lt; length + <span class=\"number\">2</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; length + <span class=\"number\">2</span> - k; l++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> r = l + k;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt; r; i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意，这里的i的意思是最后一个爆炸的是i位置的气球。</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> cur = newNums[i] * newNums[l] * newNums[r];</span><br><span class=\"line\">                    dp[l][r] = Math.max(dp[l][r], cur + dp[l][i] + dp[i][r]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][length+<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 313: Super Ugly Number<br>Analysis: 题目给出了一个质数数组，这些质数数组共同构建一个由它们相乘得到的ugly number数组。<br>这个题目可以很直观的模拟我们计算这个数组的过程，看下面例子：</p>\n<blockquote>\n<p>题目给出的质数数组是[2,7,13,19],计算ugly number数组。<br>由于数字1永远是ugly number，所以我们先把这个数字放进数组。</p>\n<ul>\n<li>第二个：将数字1和质数数组中每一个数字相乘，得到的值中取最小的值作为我们的第二个值；这时候结果数组为[1,2…….]</li>\n<li>第三个：第三个的计算和第二个相似，但是区别在于这时候质数2乘以的不再是1了，而是第二步计算得到的2.但是其余质数还是乘以1，因为它们乘以1的结果还没有被结果数组吸收；</li>\n<li>然后继续。。。。。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nthSuperUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[] primes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ret = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        ret[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] indexs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[primes.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            ret[i] = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class=\"line\">                ret[i] = Math.min(ret[i], primes[j] * ret[indexs[j]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; primes.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ret[i] == primes[j] * ret[indexs[j]]) &#123;</span><br><span class=\"line\">                    indexs[j]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 316: Remove Duplicate Letters<br>Analysis: 使用stack。还有两个数组，一个用来统计每个字符出现的次数，一个是用来标记当前字符是否已经出现在ret字符串中；</p>\n<ul>\n<li>首先统计每个字符出现的次数；</li>\n<li>遍历字符串，每遍历一个字符，将字符的数量减去一；对于当前字符，有两种情况；<ul>\n<li>1: 该字符已经在结果字符串中，那么跳到下一个字符；</li>\n<li>2: 该字符还未被使用。这种情况，需要将当前字符放到结果字符串中的字符顺序最小的位置上；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">removeDuplicateLetters</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = s.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            count[s.charAt(i) - <span class=\"string\">'a'</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Deque&lt;Character&gt; deque = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            count[s.charAt(i) - <span class=\"string\">'a'</span>]--;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (used[s.charAt(i) - <span class=\"string\">'a'</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!deque.isEmpty() &amp;&amp; deque.peek() &gt; s.charAt(i) &amp;&amp; count[deque.peek() - <span class=\"string\">'a'</span>] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                used[deque.pop() - <span class=\"string\">'a'</span>] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            deque.push(s.charAt(i));</span><br><span class=\"line\">            used[s.charAt(i) - <span class=\"string\">'a'</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!deque.isEmpty()) &#123;</span><br><span class=\"line\">            sb.append(deque.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.reverse().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 318: Maximum Product of Word Lengths<br>Analysis: Bit manipulation.</p>\n<p>AC1:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(String[] words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (words == <span class=\"keyword\">null</span> || words.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] bits = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[words.length][<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">            String cur = words[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cur.length(); j++) &#123;</span><br><span class=\"line\">                bits[i][cur.charAt(j) - <span class=\"string\">'a'</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] cur = bits[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; words.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span>[] next = bits[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (helper(cur, next)) &#123;</span><br><span class=\"line\">                    ret = Math.max(ret, words[i].length() * words[j].length());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] cur, <span class=\"keyword\">int</span>[] next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next[i] == <span class=\"number\">1</span> &amp;&amp; cur[i] == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AC2:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(String[] words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (words == <span class=\"keyword\">null</span> || words.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = words.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] mask = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            String cur = words[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; cur.length(); j++) &#123;</span><br><span class=\"line\">                mask[i] |= <span class=\"number\">1</span> &lt;&lt; (cur.charAt(j) - <span class=\"string\">'a'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((mask[i] &amp; mask[j]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    ret = Math.max(ret, words[i].length() * words[j].length());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 280 Wiggle sort &amp;&amp; 324 Wiggle sort 2<br>第一题：280<br>Analysis: 题目的要求是<code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code>，也就是位于偶数位置的(不是下标数字)不小于左右奇数位置的数。那么就可以分两种情况：</p>\n<ul>\n<li>1: 偶数位置的数字小于它前面的奇数位置上的数，那么进行交换；</li>\n<li>2: 奇数位置上的数字大于它前面的偶数位置上的数，那么进行交换；</li>\n<li>3: 为什么上面两步就一定能保证最终结果是摆动有序呢？ <ul>\n<li>1） 如果偶数位置的数字小于它前面的奇数位置上的数，交换之后，当前偶数位置的数字就不小于它之前奇数上位置的数，这时候它右边奇数上的位置的数字只可能有两种情况，大于交换后的当前偶数位置的数和小于当前偶数位置的数；小于不用理会；如果大于的话，按照上面分析，也要进行交换，又因为当前偶数位置的数已经不小于它之前奇数位置的数，而且偶数位置右边的奇数位置数大于当前数，那么就算进行当前交换之后，当前偶数位置的数字也会不小于其左边奇数位置的数；</li>\n<li>2） 奇数位置上的情况可以同样分析得到；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wiggleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 需要交换的情况：奇数时nums[i] &lt; nums[i - 1]或偶数时nums[i] &gt; nums[i - 1]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; nums[i] &lt; nums[i-<span class=\"number\">1</span>]) || (i % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; nums[i] &gt; nums[i-<span class=\"number\">1</span>]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = nums[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">                nums[i-<span class=\"number\">1</span>] = nums[i];</span><br><span class=\"line\">                nums[i] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二题： Wiggle sort 2<br>本题和上题不一样的地方在于；最终的结果不再是<code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code>， 而是<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>。<br>我们来看一个例子：</p>\n<blockquote>\n<p>对于[4,5,5,6]这个数组来说，已经满足第一题的题意，但是对于第二题来说，显然不符合。因为第二题要求偶数位置严格大于左右数字。也就是说[5,6,4,5]才是其中一个合理的答案。</p>\n</blockquote>\n<p>首先来看一个时间复杂度是$O(nlogn)$的算法：<br>AC1:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wiggleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = (nums.length + <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>, t = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            temp[i] = (i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span> ?  nums[--s] : nums[--t] ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">            nums[i] = temp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先对数组进行排序，然后从中间元素开始，左半部分放在奇数位置，右半部分放在偶数位置。</p>\n<p>然后可以看看一种更好的算法，时间复杂度是$O(n)$.<br>这里需要用到快速选择算法，也就是快速排序的切割部分。</p>\n<p>quick select.<br>快速选择的重要点在于牢牢记住，一个萝卜一个坑。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//k here means kth largest element in array.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSelect</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> L = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> R = nums.length;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (L &lt; R) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> left = L;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> right = R;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> pivot = nums[left];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(left &lt; right &amp;&amp; nums[right] &lt;= pivot) right--;</span><br><span class=\"line\">\t\t\tnums[left] = nums[right];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] &gt; pivot) left++;</span><br><span class=\"line\">\t\t\tnums[right] = nums[left];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnums[left] = pivot;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left + <span class=\"number\">1</span> == k) <span class=\"keyword\">return</span> nums[left];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; left + <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\t\tL = left + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tR = left - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nums[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的快速选择是找出数组中第k大的数字。同样的还可以通过快速排序找出数组中第k小的数字。记住的是，如果pivot选定最左边元素，那么坑就是从左边开始挖起的，因此第一个循环必须是从右边开始；反之一样。</p>\n<p>下面给出找出数组中第k小的数字；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">quickSelect</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> L = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> R = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L &lt; R) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = L;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = R;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pivot = nums[left];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] &gt; pivot) right--;</span><br><span class=\"line\">                nums[left] = nums[right];</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= pivot) left++;</span><br><span class=\"line\">                nums[right] = nums[left];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[left] = pivot;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == left + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[left];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; left + <span class=\"number\">1</span>) L = left + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> R = left - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过快速排序找出数组中第$(length + 1) / 2$小的数字，接下来的思路就和之前排序的思路是一样的了。<br>因此这道题目的最终结果是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wiggleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) temp[i] = nums[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = quickSelect(temp, (temp.length + <span class=\"number\">1</span> ) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            nums[i] = i % <span class=\"number\">2</span> == <span class=\"number\">0</span>? temp[index--] : temp[length--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">quickSelect</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> L = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> R = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L &lt; R) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> left = L;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = R;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pivot = nums[left];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[right] &gt; pivot) right--;</span><br><span class=\"line\">                nums[left] = nums[right];</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= pivot) left++;</span><br><span class=\"line\">                nums[right] = nums[left];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[left] = pivot;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == left + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; left + <span class=\"number\">1</span>) L = left + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> R = left - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 326: Power of Three<br>Analysis: 递归可以很简单的解决<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n % <span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; isPowerOfThree(n / <span class=\"number\">3</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果不利用递归或者循环，怎么解？<br>可以事先找出在整型范围内，3的幂的最大数，也就是$1162261467$。那么对于任意一个是3的幂的数字来说，都能被这个数整除。所以有：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPowerOfThree</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (n &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1162261467</span> % n == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>####Problem 329: Longest Increasing Path in a Matrix<br>Analysis:采用memo和dfs结合的方法，就能得出结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestIncreasingPath</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] memo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[matrix.length][matrix[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                ret = Math.max(ret, helper(matrix, memo, i, j));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span>[][] memo, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (memo[x][y] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> memo[x][y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= matrix.length || y &lt; <span class=\"number\">0</span> || y &gt;= matrix[<span class=\"number\">0</span>].length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, up = <span class=\"number\">0</span>, down = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; matrix[x][y] &gt; matrix[x-<span class=\"number\">1</span>][y])</span><br><span class=\"line\">            left = helper(matrix, memo, x - <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x + <span class=\"number\">1</span> &lt; matrix.length &amp;&amp; matrix[x][y] &gt; matrix[x+<span class=\"number\">1</span>][y])</span><br><span class=\"line\">            right = helper(matrix, memo, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; matrix[x][y] &gt; matrix[x][y - <span class=\"number\">1</span>])</span><br><span class=\"line\">            up = helper(matrix, memo, x, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y + <span class=\"number\">1</span> &lt; matrix[<span class=\"number\">0</span>].length &amp;&amp; matrix[x][y] &gt; matrix[x][y+<span class=\"number\">1</span>])</span><br><span class=\"line\">            down = helper(matrix, memo, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">        ret += Math.max(Math.max(left, right), Math.max(up, down));</span><br><span class=\"line\">        memo[x][y] = ret;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####Problem 330: Patching array<br>Analysis:<br>解法实在太过逆天。估计自己想破脑袋也无法想到。思路大致如下：<br><strong><em>假设当前数组已经能够完整表达$[0,miss)$之间的所有数字，那么接下来有两种情况：</em></strong></p>\n<ul>\n<li>数组中存在$nums[i] &lt;= miss$,这意味着在当前能够表达的完整数字中，接下来的这个$nums[i]$可以将这个完整表达范围继续扩展下去，扩展的范围是$miss + nums[i]$;</li>\n<li>数组中不存在$nums[i] &lt;= miss$，那么我们就必须为数组打补丁，最好的补丁就是自己本身，这样会尽可能使得表达范围增长，因此$miss = miss * 2$；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPatches</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"keyword\">null</span> || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur &lt;= n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; nums.length &amp;&amp; nums[index] &lt;= cur) &#123;</span><br><span class=\"line\">                cur += nums[index++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur += cur;</span><br><span class=\"line\">                ret++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码刚开始假设数组能够完整表达$[0,1)$开始，这也是合理的，因为就算数组是空数组，表达范围就是$[0,1)]$，接下来如果表达范围一直在目标范围里面，就继续将循环进行下去；值得注意的是每次进行判定的number的index必须随着每次miss扩展而进行移动，否则就会出现重复计算，导致TLE.</p>\n<p>####Problem 331: Verify Preorder Serialization of a Binary Tree<br>Analysis：<br>我的思路是利用栈。<br>由于题目都给定的字符串是：<code>9,3,4,#,#,1,#,#,2,#,6,#,#</code>这种形式的，因此通过分析可以知道，每一个数字后面跟着两个$#$符号，可以将其一并消除，然后用一个$#$替换，这样子到最后整个字符串应该只剩下一个字符，且该字符为$#$。</p>\n<p>我模拟一遍过程,对于<code>9,3,4,#,#,1,#,#,2,#,6,#,#</code>：</p>\n<ul>\n<li>9,3,4,#,# =&gt; 9,3,# 继续读</li>\n<li>9,3,#,1,#,# =&gt; 9,3,#,# =&gt; 9,# 继续读</li>\n<li>9,#2,#,6,#,# =&gt; 9,#,2,#,# =&gt; 9,#,# =&gt; #<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidSerialization</span><span class=\"params\">(String preorder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preorder == <span class=\"keyword\">null</span> || preorder.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        Deque&lt;String&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        String[] arr = preorder.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            String cur = arr[i];</span><br><span class=\"line\">            stack.push(cur);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (stack.size() &gt; <span class=\"number\">2</span> &amp;&amp; stack.peek().equals(<span class=\"string\">\"#\"</span>))&#123;</span><br><span class=\"line\">                String temp1 = stack.pop();</span><br><span class=\"line\">                String temp2 = stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp2.equals(<span class=\"string\">\"#\"</span>) &amp;&amp; !stack.peek().equals(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">                    stack.push(<span class=\"string\">\"#\"</span>);   </span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    stack.push(temp2);</span><br><span class=\"line\">                    stack.push(temp1);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.size() == <span class=\"number\">1</span> &amp;&amp; stack.peek().equals(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此外，还在讨论区看见了另外一种解法，利用的是<strong>入度和出度的差</strong>。来看看这种思路：</p>\n<p>对于二叉树，我们把空的地方也作为叶子节点（如题目中的#），那么有</p>\n<ul>\n<li>所有的非空节点提供2个出度和1个入度（根除外）</li>\n<li>所有的空节点但提供0个出度和1个入度</li>\n</ul>\n<p>我们在遍历的时候，计算diff = outdegree – indegree. 当一个节点出现的时候，diff – 1，因为它提供一个入度；当节点不是#的时候，diff+2(提供两个出度) 如果序列式合法的，那么遍历过程中diff &gt;=0 且最后结果为0.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidSerialization</span><span class=\"params\">(String preorder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preorder == <span class=\"keyword\">null</span> || preorder.length() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        String[] nodes = preorder.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这里为什么初始化为1，还没想明白。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> diff = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String node: nodes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--diff &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!node.equals(<span class=\"string\">\"#\"</span>)) diff += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> diff == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>locked: 158 159 163 246 247 249 251 253 259 261 266 269 270 271 272<br>locked: 276 280 281 293 294 302 305 317 320 323 288 298<br>Unsolved: 214 218 315 327<br>332</p>\n"}