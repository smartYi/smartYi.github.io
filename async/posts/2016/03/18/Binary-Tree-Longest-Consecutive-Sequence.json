{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/18/Binary-Tree-Longest-Consecutive-Sequence.json","date":1458356502000,"path":{"year":2016,"month":3,"day":18,"name":"Binary-Tree-Longest-Consecutive-Sequence"},"title":"Binary Tree Longest Consecutive Sequence","permalink":"http://www.smartyi8979.com/2016/03/18/Binary-Tree-Longest-Consecutive-Sequence/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem :\"></a>Problem :</h4><p>Given a binary tree, find the length of the longest consecutive sequence path.<br><a id=\"more\"></a></p>\n<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     3</span><br><span class=\"line\">    / \\</span><br><span class=\"line\">   2   4</span><br><span class=\"line\">        \\</span><br><span class=\"line\">         5</span><br></pre></td></tr></table></figure>\n<p>Longest consecutive sequence path is <code>3-4-5</code>, so return <code>3</code>.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  2</span><br><span class=\"line\">   \\</span><br><span class=\"line\">    3</span><br><span class=\"line\">   / </span><br><span class=\"line\">  2    </span><br><span class=\"line\"> / </span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>Longest consecutive sequence path is <code>2-3</code>,not <code>3-2-1</code>, so return <code>2</code>.</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>看到树的题目一定是递归，尤其是这种明显的深搜问题。根据consecutive sequence的定义，每个后面节点只比前面节点值大1.根据这个特性，我们可以来解答这个题目。<br>维护两个变量，一个是当前最大值，一个是全局最大值。</p>\n<ul>\n<li>如果还在处于consecutive sequence的路径上，那么局部最大值加1；</li>\n<li>如果不在consecutive sequence的路径上了，那么更新全局最大值，并且重置局部最大值为1；</li>\n<li>然后递归调用左子树和右子树，并且返回左右子树返回值的最大值；</li>\n</ul>\n<p>AC代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestConsecutive</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(root, root.val, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> cur, <span class=\"keyword\">int</span> ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> Math.max(cur, ret);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.val == target) &#123;</span><br><span class=\"line\">            cur++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ret = Math.max(cur, ret);</span><br><span class=\"line\">            cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        target = root.val + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = helper(root.left, target, cur, ret);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = helper(root.right, target, cur, ret);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(left, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>掌握递归思想，传入自己想要的参数。</p>\n"}