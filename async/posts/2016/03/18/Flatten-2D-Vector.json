{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":48},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":46},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":46}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":50}],"url":"/async/posts/2016/03/18/Flatten-2D-Vector.json","date":1458305725000,"path":{"year":2016,"month":3,"day":18,"name":"Flatten-2D-Vector"},"title":"Flatten 2D Vector","permalink":"http://www.smartyi8979.com/2016/03/18/Flatten-2D-Vector/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Implement an iterator to flatten a 2d vector.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">Given 2d vector =</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [4,5,6]</span><br><span class=\"line\">]</span><br><span class=\"line\">By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,2,3,4,5,6].</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>给定一个<code>List&lt;List&lt;Integer&gt;&gt; vec2d</code>，要求通过hasNext()和next()方法来平摊数组。</p>\n<p>看到这两个方法和List数据结构，运用iterator来解决这个问题是无疑的了。那么如何解决在各个iterator之间的切换。我是用一个index来标记当前已经用到的iterator。偷偷瞄了瞄讨论区的解法，大部分用的都是两个iterators，因为里面每个List有一个迭代器，而最外层的List也有一个大的迭代器。想法相同，代码同样精简。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2D</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Iterator&lt;Integer&gt; iterator;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;List&lt;Integer&gt;&gt; vec2d;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Vector2D</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; vec2d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vec2d == <span class=\"keyword\">null</span> || vec2d.size() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.vec2d = vec2d;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = vec2d.size();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.iterator = <span class=\"keyword\">this</span>.size == <span class=\"keyword\">this</span>.index? <span class=\"keyword\">null</span> : vec2d.get(index).iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iterator == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!iterator.hasNext() &amp;&amp; index &lt; size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            iterator = vec2d.get(++index).iterator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator.hasNext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一值得注意的是代码中hasNext()方法中的while循环，起初我用的是if，后来报错，发现报错的测试案例中是因为连续两个List都是空的，所以单纯的if判断是不足以满足遍历的，单单把if改成while就能通过了。</p>\n"}