{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":50},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":48},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":48}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":52}],"url":"/async/posts/2016/03/18/Graph-Valid-Tree.json","date":1458309628000,"path":{"year":2016,"month":3,"day":18,"name":"Graph-Valid-Tree"},"title":"Graph Valid Tree","permalink":"http://www.smartyi8979.com/2016/03/18/Graph-Valid-Tree/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given n nodes labeled from <code>0</code> to <code>n - 1</code> and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example:</span><br><span class=\"line\"></span><br><span class=\"line\">Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.</span><br><span class=\"line\"></span><br><span class=\"line\">Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>给定一个图，判断这个图是否是一棵树。根据树的定义，我们知道：</p>\n<ul>\n<li>树中不能有环；</li>\n<li>树不是森林，所以不能存在多棵树，那也就是说遍历整个图得到的节点数量和给出n一样大；</li>\n</ul>\n<p>构图采用临接表的方法，那么其实重点就在于如何判断一个无向图中是否有环。因为根据有向图的临接表表示法，在一个edge两侧的节点都会添加到互相的临接表中，那么我们就不能通过判定一个节点的临接表是否包含另一个节点来检测是否有环。<br>通常检测图中是否有环的方法是，深搜图然后标记访问节点，一旦发现已经访问过的节点，那么就有两种情况：</p>\n<ul>\n<li>之前从其他路径访问过，那么证明图中有环；</li>\n<li>这个节点的起始点恰好是你搜索的起始点，那么其实这只是一条edge的两侧节点而已，并不是环；</li>\n</ul>\n<p>有了这两点和上面的图，我们就能够解答这道题了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validTree</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span>[][] edges)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (edges == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (edges.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        ArrayList&lt;Integer&gt;[] graph = <span class=\"keyword\">new</span> ArrayList[n];</span><br><span class=\"line\">        buildGraph(edges, graph);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = search(graph, edges[<span class=\"number\">0</span>][<span class=\"number\">0</span>], edges[<span class=\"number\">0</span>][<span class=\"number\">1</span>], visited);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num == n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildGraph</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] edges, List[] graph)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = edges[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> q = edges[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (graph[p] == <span class=\"keyword\">null</span>) graph[p] = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (graph[q] == <span class=\"keyword\">null</span>) graph[q] = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">            graph[p].add(q);</span><br><span class=\"line\">            graph[q].add(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(List[] graph, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">boolean</span>[] visited)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        visited[start] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : (ArrayList&lt;Integer&gt;)graph[start]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> next = search(graph, i, start, visited);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (next == -<span class=\"number\">1</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> ret += next;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"comment\">//判断是否是一条edge的两侧节点。</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i != end) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无向图的深搜加上图的环的检测。很重要。</p>\n"}