{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":60},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":58},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":58}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":62}],"url":"/async/posts/2016/03/18/Alien-Dictionary.json","date":1458313619000,"path":{"year":2016,"month":3,"day":18,"name":"Alien-Dictionary"},"title":"Alien Dictionary","permalink":"http://www.smartyi8979.com/2016/03/18/Alien-Dictionary/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example,</span><br><span class=\"line\">Given the following words in dictionary,</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  &quot;wrt&quot;,</span><br><span class=\"line\">  &quot;wrf&quot;,</span><br><span class=\"line\">  &quot;er&quot;,</span><br><span class=\"line\">  &quot;ett&quot;,</span><br><span class=\"line\">  &quot;rftt&quot;</span><br><span class=\"line\">]</span><br><span class=\"line\">The correct order is: &quot;wertf&quot;.</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>一看完题目，神奇的直觉告诉我这是图的题目。忍不住偷偷看了一下tags，果然是图。<br>题目告知我们的是收到一大堆单词，这些单词是按照字典序排序的，<strong>注意，是这些单词按字典序排序，并不是每个单词都是按字典序排序</strong>。然后根据这个，叫你找出最原始的字符的字典顺序。<br>仔细想想，其实这个和拓扑排序很类似。那么重点就是如何构建这个有向图了。为何我说是有向图，因为有先后顺序啊。  </p>\n<p>为了想出如何构建这个图，我又开始进行人类思维模拟。就拿上面的例子来进行模拟吧：</p>\n<p>给出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;wrt&quot;, &quot;wrf&quot;, &quot;er&quot;, &quot;ett&quot;, &quot;rftt&quot;]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>比较<code>wrt</code>和<code>wrf</code>，我们得到字典序<code>t</code>小于<code>f</code>；</li>\n<li>比较<code>wrt</code>和<code>er</code>，我们得到字典序<code>w</code>小于<code>e</code>，注意在这里我们并得不到<code>r</code>和<code>t</code>之间的关系；</li>\n<li>比较<code>wrt</code>和<code>ett</code>，我们得到字典序<code>w</code>小于<code>e</code>，注意在这里我们并得不到<code>r</code>和<code>t</code>之间的关系；</li>\n<li>比较<code>wrt</code>和<code>rftt</code>，我们得到字典序<code>w</code>小于<code>r</code>，注意在这里我们并得不到<code>r</code>和<code>f</code>之间的关系；</li>\n<li>两层循环，以此来构建图；</li>\n</ul>\n<p>那么图构建完毕之后就是进行拓扑排序了，拓扑排序牢记一点，<strong><em>剥洋葱</em></strong>。先找出叶子节点，然后剥去喝叶子节点相连接的edge，然后更新叶子节点，直至最后面完全有序。<br>此外还有一点要注意的是，我们得判定当前图是否一定拓扑有序，判断标准就是用一个变量标记已经剥去的叶子节点数，如果等于所有节点数，那么拓扑有序，否则不能进行拓扑排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">alienOrder</span><span class=\"params\">(String[] words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (words == <span class=\"keyword\">null</span> || words.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        Map&lt;Character, Set&lt;Character&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; degree = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : words) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> ch : word.toCharArray()) &#123;</span><br><span class=\"line\">                degree.put(ch, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            String cur = words[i];</span><br><span class=\"line\">            String next = words[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> length = Math.min(cur.length(), next.length());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c1 = cur.charAt(j);</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c2 = next.charAt(j);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">                    Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (map.containsKey(c1)) set = map.get(c1);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!set.contains(c2)) &#123;</span><br><span class=\"line\">                        set.add(c2);</span><br><span class=\"line\">                        map.put(c1, set);</span><br><span class=\"line\">                        degree.put(c2, degree.get(c2) + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;Character&gt; queue = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> key : degree.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (degree.get(key) == <span class=\"number\">0</span>) queue.offer(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (queue.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> cur = queue.poll();</span><br><span class=\"line\">            ret++;</span><br><span class=\"line\">            sb.append(cur);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(cur)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : map.get(cur)) &#123;</span><br><span class=\"line\">                    degree.put(c, degree.get(c) - <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (degree.get(c) == <span class=\"number\">0</span>) queue.offer(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.length() == degree.size() ? sb.toString() : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>难度不在于分析，而在于如何bug free的写出来。</p>\n"}