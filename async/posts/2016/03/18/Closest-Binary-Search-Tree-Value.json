{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":66},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":62}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":68}],"url":"/async/posts/2016/03/18/Closest-Binary-Search-Tree-Value.json","date":1458320203000,"path":{"year":2016,"month":3,"day":18,"name":"Closest-Binary-Search-Tree-Value"},"title":"Closest Binary Search Tree Value","permalink":"http://www.smartyi8979.com/2016/03/18/Closest-Binary-Search-Tree-Value/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.<br><a id=\"more\"></a></p>\n<p><strong>Note:<br>Given target value is a floating point.<br>You are guaranteed to have only one unique value in the BST that is closest to the target.</strong></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>一看到树的题目，第一反应就是递归解法。这题也不意外。</p>\n<ul>\n<li>递归左子树的解；</li>\n<li>递归右子树的解；</li>\n<li>判定和当前的进行比较，然后取最靠近的；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">closestValue</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">double</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> diff = Math.abs(target - root.val);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = root.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            left = closestValue(root.left, target);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff &gt; Math.abs(target - left)) &#123;</span><br><span class=\"line\">                ret = left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            right = closestValue(root.right, target);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( diff &gt; Math.abs(target - right)) &#123;</span><br><span class=\"line\">                ret = right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span> &amp;&amp; root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            left = closestValue(root.left, target);</span><br><span class=\"line\">            right = closestValue(root.right, target);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = Math.abs(target - left) &lt; Math.abs(target - right) ? left : right;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff &gt; Math.abs(target - next)) &#123;</span><br><span class=\"line\">                ret = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>树的递归很重要。</p>\n<p>那么除了上述的递归，还有没有其他解法，题目给定的是BST，能不能利用这个做些文章呢？当然是可以的。BST的特性就是对于树中任意节点来说，左子树的所有元素都小于它，右子树的所有元素都大于它。</p>\n<ul>\n<li>假设根元素和目标元素相同，直接返回；</li>\n<li>如果根元素大于目标元素，那么右子树的所有元素都不可能是潜在性答案，因为他们比根元素更大；</li>\n<li>反之亦然；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">closestValue</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">double</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = root.val;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val == target) <span class=\"keyword\">return</span> root.val;</span><br><span class=\"line\">            ret = Math.abs(target - root.val) &lt; Math.abs(target - ret) ? root.val : ret;</span><br><span class=\"line\">            root =  root.val &gt; target ? root.left : root.right; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简洁明了。</p>\n"}