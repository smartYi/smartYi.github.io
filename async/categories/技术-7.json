{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72,"_total":72,"_totalPage":8,"_page":7,"posts":[{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/18/Unique-Word-Abbreviation.json","date":1458352910000,"path":{"year":2016,"month":3,"day":18,"name":"Unique-Word-Abbreviation"},"title":"Unique Word Abbreviation","permalink":"http://www.smartyi8979.com/2016/03/18/Unique-Word-Abbreviation/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem :\"></a>Problem :</h4><p>An abbreviation of a word follows the form <first letter><number><last letter>. Below are some examples of word abbreviations:<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/16/Valid-Parentheses.json","date":1458156859000,"path":{"year":2016,"month":3,"day":16,"name":"Valid-Parentheses"},"title":"Valid Parentheses","permalink":"http://www.smartyi8979.com/2016/03/16/Valid-Parentheses/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a string, valid if this is a valid parentheses.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/17/Verify-Preorder-Serialization-of-a-Binary-Tree.json","date":1458264413000,"path":{"year":2016,"month":3,"day":17,"name":"Verify-Preorder-Serialization-of-a-Binary-Tree"},"title":"Verify Preorder Serialization of a Binary Tree","permalink":"http://www.smartyi8979.com/2016/03/17/Verify-Preorder-Serialization-of-a-Binary-Tree/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node’s value. If it is a null node, we record using a sentinel value such as <code>#</code>.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/17/Wiggle-sort.json","date":1458262642000,"path":{"year":2016,"month":3,"day":17,"name":"Wiggle-sort"},"title":"Wiggle sort 1&2","permalink":"http://www.smartyi8979.com/2016/03/17/Wiggle-sort/","content":"<h4 id=\"Problem-1\"><a href=\"#Problem-1\" class=\"headerlink\" title=\"Problem 1:\"></a>Problem 1:</h4><p>Given an unsorted array nums, reorder it in-place such that <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]....</code><br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/16/Word-Break-1&2.json","date":1458159666000,"path":{"year":2016,"month":3,"day":16,"name":"Word-Break-1&2"},"title":"Word Break 1&2","permalink":"http://www.smartyi8979.com/2016/03/16/Word-Break-1&2/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>Given a string and a dict, check whether this string can be broken into several strings that are included in the dict.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/18/Zigzag-Iterator.json","date":1458349916000,"path":{"year":2016,"month":3,"day":18,"name":"Zigzag-Iterator"},"title":"Zigzag Iterator","permalink":"http://www.smartyi8979.com/2016/03/18/Zigzag-Iterator/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given two 1d vectors, implement an iterator to return their elements alternately.<br>"},{"tags":[{"name":"教程","permalink":"http://www.smartyi8979.com/tags/教程/","url":"/async/tags/教程.json","count":2},{"name":"Markdown","permalink":"http://www.smartyi8979.com/tags/Markdown/","url":"/async/tags/Markdown.json","count":2}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/15/markdown_tutorial_part1.json","date":1458095990000,"path":{"year":2016,"month":3,"day":15,"name":"markdown_tutorial_part1"},"title":"Markdown tutorials Part1","permalink":"http://www.smartyi8979.com/2016/03/15/markdown_tutorial_part1/","content":"<p><div id=\"preface\"></div></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>MarkDown是一种轻量级标记语言，让我们更注重于内容本身，而非format。MarkDown标签数量相对于html来说，极大地减少，但能基本满足我们撰文需求。本教程分为几个部分来介绍MarkDown。<br>"},{"tags":[{"name":"教程","permalink":"http://www.smartyi8979.com/tags/教程/","url":"/async/tags/教程.json","count":2},{"name":"Markdown","permalink":"http://www.smartyi8979.com/tags/Markdown/","url":"/async/tags/Markdown.json","count":2}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/15/markdown_tutorial_part2.json","date":1458095990000,"path":{"year":2016,"month":3,"day":15,"name":"markdown_tutorial_part2"},"title":"Markdown tutorials Part2","permalink":"http://www.smartyi8979.com/2016/03/15/markdown_tutorial_part2/","content":"<!-- import js for mathjax -->\n<script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n\n<p><div id=\"preface\"></div></p>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>MarkDown是一种轻量级标记语言，让我们更注重于内容本身，而非format。MarkDown标签数量相对于html来说，极大地减少，但能基本满足我们撰文需求。本教程分为几个部分来介绍MarkDown。本教程将介绍：<strong><em>表格和公式 !</em></strong><br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/16/miss-ranges.json","date":1458108138000,"path":{"year":2016,"month":3,"day":16,"name":"miss-ranges"},"title":"Missing Ranges","permalink":"http://www.smartyi8979.com/2016/03/16/miss-ranges/","content":"<p><a href=\"https://leetcode.com/problems/missing-ranges/\">Leetcode链接/Missing Ranges</a></p>\n<h4 id=\"Problem-Missing-Ranges\"><a href=\"#Problem-Missing-Ranges\" class=\"headerlink\" title=\"Problem: Missing Ranges\"></a>Problem: Missing Ranges</h4><p>Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":69},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":70}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":72}],"url":"/async/posts/2016/03/25/Gray-Code.json","date":1458931893000,"path":{"year":2016,"month":3,"day":25,"name":"Gray-Code"},"title":"Gray Code","permalink":"http://www.smartyi8979.com/2016/03/25/Gray-Code/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>The gray code is a binary numeral system where two successive values differ in only one bit.<br>"}]}