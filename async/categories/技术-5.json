{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46,"_total":46,"_totalPage":5,"_page":5,"posts":[{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":44},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":42},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":42}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46}],"url":"/async/posts/2016/03/17/Remove-Duplicate-Letters.json","date":1458260872000,"path":{"year":2016,"month":3,"day":17,"name":"Remove-Duplicate-Letters"},"title":"Remove Duplicate Letters","permalink":"http://www.smartyi8979.com/2016/03/17/Remove-Duplicate-Letters/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.<br>"},{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":44},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":42},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":42}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46}],"url":"/async/posts/2016/03/17/Maximum-Product-of-Word-Lengths.json","date":1458262136000,"path":{"year":2016,"month":3,"day":17,"name":"Maximum-Product-of-Word-Lengths"},"title":"Maximum Product of Word Lengths","permalink":"http://www.smartyi8979.com/2016/03/17/Maximum-Product-of-Word-Lengths/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.<br>"},{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":44},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":42},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":42}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46}],"url":"/async/posts/2016/03/17/Wiggle-sort.json","date":1458262642000,"path":{"year":2016,"month":3,"day":17,"name":"Wiggle-sort"},"title":"Wiggle sort 1&2","permalink":"http://www.smartyi8979.com/2016/03/17/Wiggle-sort/","content":"<h4 id=\"Problem-1\"><a href=\"#Problem-1\" class=\"headerlink\" title=\"Problem 1:\"></a>Problem 1:</h4><p>Given an unsorted array nums, reorder it in-place such that <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]....</code><br>"},{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":44},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":42},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":42}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46}],"url":"/async/posts/2016/03/17/Power-of-Three.json","date":1458263212000,"path":{"year":2016,"month":3,"day":17,"name":"Power-of-Three"},"title":"Power of Three","permalink":"http://www.smartyi8979.com/2016/03/17/Power-of-Three/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>Given an integer, write a function to determine if it is a power of three.<br>"},{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":44},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":42},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":42}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46}],"url":"/async/posts/2016/03/17/Longest-Increasing-Path-in-a-Matrix.json","date":1458263611000,"path":{"year":2016,"month":3,"day":17,"name":"Longest-Increasing-Path-in-a-Matrix"},"title":"Longest Increasing Path in a Matrix","permalink":"http://www.smartyi8979.com/2016/03/17/Longest-Increasing-Path-in-a-Matrix/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given an integer matrix, find the length of the longest increasing path.<br>"},{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":44},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":42},{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":42}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":46}],"url":"/async/posts/2016/03/17/Patching-array.json","date":1458264023000,"path":{"year":2016,"month":3,"day":17,"name":"Patching-array"},"title":"Patching array","permalink":"http://www.smartyi8979.com/2016/03/17/Patching-array/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.<br>"}]}