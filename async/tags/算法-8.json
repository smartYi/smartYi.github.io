{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83,"_total":83,"_totalPage":9,"_page":8,"posts":[{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/18/Super-Ugly-Number.json","date":1458260234000,"path":{"year":2016,"month":3,"day":18,"name":"Super-Ugly-Number"},"title":"Super Ugly Number","permalink":"http://www.smartyi8979.com/2016/03/18/Super-Ugly-Number/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Write a program to find the nth super ugly number.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/24/Surrounded-Regions.json","date":1458760983000,"path":{"year":2016,"month":3,"day":24,"name":"Surrounded-Regions"},"title":"Surrounded Regions","permalink":"http://www.smartyi8979.com/2016/03/24/Surrounded-Regions/","content":"<h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><p>Given a 2D board containing ‘X’ and ‘O’, capture all regions surrounded by ‘X’.</p>\n<p>A region is captured by flipping all ‘O’s into ‘X’s in that surrounded region.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/29/Tree-Traversal.json","date":1459217721000,"path":{"year":2016,"month":3,"day":29,"name":"Tree-Traversal"},"title":"Tree Traversal","permalink":"http://www.smartyi8979.com/2016/03/29/Tree-Traversal/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>这里把二叉树的前序，中序以及后序遍历的递归和迭代解法分别给出，此外还有二叉树的层序遍历，这是很多二叉树其他算法的基础。<br>"},{"tags":[{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/23/Union-Find算法详解.json","date":1458743463000,"path":{"year":2016,"month":3,"day":23,"name":"Union-Find算法详解"},"title":"Union Find算法详解","permalink":"http://www.smartyi8979.com/2016/03/23/Union-Find算法详解/","content":"<p>本笔记来自于Robert Sedgewick算法中文版第四版。</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>问题是输入的是一系列整数对，每个整数代表某一种数据类型，一对整数对<code>[p,q]</code>可以理解为“p和q是相连的”，在这里我们定义的相连是一种等价关系：<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/19/Unique-Word-Abbreviation.json","date":1458352910000,"path":{"year":2016,"month":3,"day":19,"name":"Unique-Word-Abbreviation"},"title":"Unique Word Abbreviation","permalink":"http://www.smartyi8979.com/2016/03/19/Unique-Word-Abbreviation/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem :\"></a>Problem :</h4><p>An abbreviation of a word follows the form <first letter><number><last letter>. Below are some examples of word abbreviations:<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/17/Valid-Parentheses.json","date":1458156859000,"path":{"year":2016,"month":3,"day":17,"name":"Valid-Parentheses"},"title":"Valid Parentheses","permalink":"http://www.smartyi8979.com/2016/03/17/Valid-Parentheses/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given a string, valid if this is a valid parentheses.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/18/Verify-Preorder-Serialization-of-a-Binary-Tree.json","date":1458264413000,"path":{"year":2016,"month":3,"day":18,"name":"Verify-Preorder-Serialization-of-a-Binary-Tree"},"title":"Verify Preorder Serialization of a Binary Tree","permalink":"http://www.smartyi8979.com/2016/03/18/Verify-Preorder-Serialization-of-a-Binary-Tree/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node’s value. If it is a null node, we record using a sentinel value such as <code>#</code>.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/18/Wiggle-sort.json","date":1458262642000,"path":{"year":2016,"month":3,"day":18,"name":"Wiggle-sort"},"title":"Wiggle sort 1&2","permalink":"http://www.smartyi8979.com/2016/03/18/Wiggle-sort/","content":"<h4 id=\"Problem-1\"><a href=\"#Problem-1\" class=\"headerlink\" title=\"Problem 1:\"></a>Problem 1:</h4><p>Given an unsorted array nums, reorder it in-place such that <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]....</code><br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83},{"name":"Google","permalink":"http://www.smartyi8979.com/tags/Google/","url":"/async/tags/Google.json","count":61}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/17/Word-Break-1&2.json","date":1458159666000,"path":{"year":2016,"month":3,"day":17,"name":"Word-Break-1&2"},"title":"Word Break 1&2","permalink":"http://www.smartyi8979.com/2016/03/17/Word-Break-1&2/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h4><p>Given a string and a dict, check whether this string can be broken into several strings that are included in the dict.<br>"},{"tags":[{"name":"Leetcode","permalink":"http://www.smartyi8979.com/tags/Leetcode/","url":"/async/tags/Leetcode.json","count":82},{"name":"算法","permalink":"http://www.smartyi8979.com/tags/算法/","url":"/async/tags/算法.json","count":83}],"categories":[{"name":"技术","permalink":"http://www.smartyi8979.com/categories/技术/","url":"/async/categories/技术.json","count":85}],"url":"/async/posts/2016/03/28/Word-Ladder.json","date":1459096751000,"path":{"year":2016,"month":3,"day":28,"name":"Word-Ladder"},"title":"Word Ladder I","permalink":"http://www.smartyi8979.com/2016/03/28/Word-Ladder/","content":"<h4 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h4><p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:<br>"}]}